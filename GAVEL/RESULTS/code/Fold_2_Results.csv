,text,label,Dependency management_prediction,Dependency management_label,Support_prediction,Support_label,Testing_prediction,Testing_label,Reporting_prediction,Reporting_label,Mobile CI_prediction,Mobile CI_label,Community_prediction,Community_label,Security_prediction,Security_label,Chat_prediction,Chat_label,IDEs_prediction,IDEs_label,Monitoring_prediction,Monitoring_label,Code review_prediction,Code review_label,Code quality_prediction,Code quality_label,Publishing_prediction,Publishing_label,Project management_prediction,Project management_label,API management_prediction,API management_label,Open Source management_prediction,Open Source management_label,Mobile_prediction,Mobile_label,Code search_prediction,Code search_label,GitHub Sponsors_prediction,GitHub Sponsors_label,Continuous integration_prediction,Continuous integration_label,Deployment_prediction,Deployment_label,Container CI_prediction,Container CI_label,Localization_prediction,Localization_label,Utilities_prediction,Utilities_label,Desktop tools_prediction,Desktop tools_label,AI Assisted_prediction,AI Assisted_label,Time tracking_prediction,Time tracking_label,Code Scanning Ready_prediction,Code Scanning Ready_label,Backup Utilities_prediction,Backup Utilities_label,Learning_prediction,Learning_label
228,"on:
  push:
    tags:
      - '*'

---

- name: Publish gem
  uses: dawidd6/action-publish-gem@v1
  with:
    # Optional, will publish to RubyGems if specified
    api_key: ${{secrets.RUBYGEMS_API_KEY}}
    # Optional, will publish to GitHub Packages if specified
    github_token: ${{secrets.GITHUB_TOKEN}}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
229,"steps:
- uses: mirromutth/mysql-action@v1.1
  with:
    host port: 3800 # Optional, default value is 3306. The port of host
    container port: 3307 # Optional, default value is 3306. The port of container
    character set server: \'utf8\' # Optional, default value is \'utf8mb4\'. The \'--character-set-server\' option for mysqld
    collation server: \'utf8_general_ci\' # Optional, default value is \'utf8mb4_general_ci\'. The \'--collation-server\' option for mysqld
    mysql version: \'8.0\' # Optional, default value is ""latest"". The version of the MySQL
    mysql database: \'some_test\' # Optional, default value is ""test"". The specified database which will be create
    mysql root password: ${{ secrets.RootPassword }} # Required if ""mysql user"" is empty, default is empty. The root superuser password
    mysql user: \'developer\' # Required if ""mysql root password"" is empty, default is empty. The superuser for the specified database. Can use secrets, too
    mysql password: ${{ secrets.DatabasePassword }} # Required if ""mysql user"" exists. The password for the ""mysql user""

jobs:
  build:
    runs-on: ubuntu-${{ ubuntu-version }} # is Ubuntu environment

    # ... some other config ...

    steps:
    - # ... some prepare steps, like action/checkout, run some script without MySQL, etc.

    - name: Shutdown Ubuntu MySQL (SUDO)
      run: sudo service mysql stop # Shutdown the Default MySQL, ""sudo"" is necessary, please not remove it

    - # ... some steps before set-up MySQL ...
    - name: Set up MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        # ... Set-up MySQL configuration, see Usage

    - # ... some steps after set-up MySQL ...

    # ... some another config ...
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
230,"- name: Sleep for 30 seconds
  run: sleep 30s
  shell: bash

- name: Sleep for 30 seconds
  run: Start-Sleep -s 30
  shell: powershell

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Sleep for 30 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '30s'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
231,"- name: Dump docker logs on failure
  if: failure()
  uses: jwalton/gh-docker-logs@v2

- name: Dump redis logs
  uses: jwalton/gh-docker-logs@v2
  with:
    images: \'redis,mongo\'
    # Only show last 100 lines of each
    tail: \'100\'

- name: Collect docker logs on failure
  if: failure()
  uses: jwalton/gh-docker-logs@v2
  with:
    dest: \'./logs\'
- name: Tar logs
  if: failure()
  run: tar cvzf ./logs.tgz ./logs
- name: Upload logs to GitHub
  if: failure()
  uses: actions/upload-artifact@master
  with:
    name: logs.tgz
    path: ./logs.tgz

- name: Dump docker logs on failure using different shell
  if: failure()
  uses: jwalton/gh-docker-logs@v2
  with:
    shell: \'/bin/sh\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
232,"- uses: jen20/action-docker-build@v1
  with:
      # Required. The name of the Docker repository to push to.
      repository: jen20/test-action-docker-build
      # Required. The username with which to authenticate with the
      # specified Docker registry.
      username: jen20
      # Required. The password with which to authenticate with the
      # specified Docker registry. It is strongly recommended that
      # this value be considered a secret.
      password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      # Optional. The path to the Dockerfile relative to the root
      # of the repository. Defaults to ""Dockerfile"".
      dockerfile: Dockerfile
      # Optional. The URL of the Docker registry to which to push.
      # Uses the Docker CLI default if unset.
      registry: https://customregistry.example.com/v2
      # Optional. Whether or not to apply the `latest` tag to the
      # built image, and push it to the registry. Defaults to false.
      tag-latest: true
      # Optional. Whether or not to apply a `snapshot` tag to the
      # built image, and push it to the registry. Snapshot tags consist
      # of the build date (in `YYYYMMDD-HHMMSS` format) and the short
      # commit hash of the source material. Defaults to false.
      tag-snapshot: true
      # Optional. A list of additional tags to apply to the image, and
      # push to the registry. Tags must be listed in a comma-separated
      # fashion.
      additional-tags: firstadditionaltag, secondadditionaltag
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
233,"steps:
  - name: Action 1
    uses: ...

  - name: Action 2
    run: ...

  - name: Notify
    uses: innocarpe/actions-slack@v1
    with:
      status: ${{ jobs.<job_id>.status }} # Required
      success_text: \'Step Succeeded \xf0\x9f\x9a\x80\' # Optional
      failure_text: \'Step Failed \xf0\x9f\x98\xb1\' # Optional
      cancelled_text: \'Step Cancelled \xe2\x9a\xa0\xef\xb8\x8f\' # Optional
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Required

steps:
  - name: Notify the start
    uses: innocarpe/actions-slack@v1
    with:
      status: ${{ jobs.<job_id>.status }} # Required
      success_text: \'<!subteam^S1ABC2DEF> @${{ github.actor }} just started the workflow for `${{ github.ref }}`\'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Required

  - name: Action 1
    uses: ...

  - name: Action 2
    run: ...
    
  - name: Notify to Slack
    uses: innocarpe/actions-slack@v1
    with:
      status: ${{ jobs.<job_id>.status }} # Required
      success_text: \'<!subteam^S1ABC2DEF> The awesome workflow just finished \xe2\x9c\x85\'
      failure_text: \'<!subteam^S1ABC2DEF> The bad workflow failed. Please check the issue below \xf0\x9f\x91\x87\'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Required
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
234,"- uses: azure/docker-login@v1\r
  with:\r
    login-server: '<login server>' # default: index.docker.io\r
    username: '<username>'\r
    password: '<password>'\r

- uses: azure/docker-login@v1\r
  with:\r
    login-server: contoso.azurecr.io\r
    username: ${{ secrets.ACR_USERNAME }}\r
    password: ${{ secrets.ACR_PASSWORD }}\r
- uses: azure/docker-login@v1\r
  with:\r
    login-server: index.docker.io\r
    username: ${{ secrets.DOCKERIO_USERNAME }}\r
    password: ${{ secrets.DOCKERIO_PASSWORD }}\r
- run: |\r
    docker pull contoso.azurecr.io/private/image:latest\r
    docker pull private/image:latest\r

- uses: azure/docker-login@v1\r
  with:\r
    login-server: contoso.azurecr.io\r
    username: ${{ secrets.REGISTRY_USERNAME }}\r
    password: ${{ secrets.REGISTRY_PASSWORD }}\r
\r
- run: |\r
    docker build . -t contoso.azurecr.io/k8sdemo:${{ github.sha }}\r
    docker push contoso.azurecr.io/k8sdemo:${{ github.sha }}\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
235,"- uses: azure/setup-helm@v3
  with:
     version: '<version>' # default is latest (stable)
     token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
  id: install
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
236,"# bare minimal
name: changes
on: push
jobs:
  changes:
    runs-on: ubuntu-latest
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3

### full
name: changes
on: [push, pull_request] # push or pull, or any event with custom pr number or before/after commit sha
jobs:
  changes:
    runs-on: ubuntu-latest
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          # optional target repo
          githubRepo: trilom/file-changes-action
          # optional token
          githubToken: ${{ secrets.BOT_TOKEN }}
          # optional output format
          output: 'json'
          # optional fileoutput format
          fileOutput: 'csv'
          # optional push before SHA (need both before and after)
          pushBefore: 79eeec74aebc3deb0a2f6234c5ac13142e9224e5
          # optional push after SHA (need both before and after)
          pushAfter: 1c5a2bfde79e2c9cffb75b9a455391350fe69a40
          # optional PR number to compare
          prNumber: 36

name: push-develop
on: [push]
jobs:
  changes:
    runs-on: ubuntu-latest
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3
      - name: test
        run: |
          cat $HOME/files.json
          cat $HOME/files_modified.json
          cat $HOME/files_added.json
          cat $HOME/files_removed.json
          echo '${{ steps.file_changes.outputs.files}}'
          echo '${{ steps.file_changes.outputs.files_modified}}'
          echo '${{ steps.file_changes.outputs.files_added}}'
          echo '${{ steps.file_changes.outputs.files_removed}}'

name: push-develop
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          output: ','
          fileOutput: ','
      - name: test
        run: |
          cat $HOME/files.csv

name: push-develop
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@0.6.0
        id: pr
        with:
          github-token: ${{env.BOT_USER_TOKEN}}
          result-encoding: string
          script: |
            const result = await github.repos.listPullRequestsAssociatedWithCommit({
              owner: context.payload.repository.owner.name,
              repo: context.payload.repository.name,
              commit_sha: context.payload.head_commit.id
            })
            return result.data[0].number;
      - id: file_changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          githubToken: ${{ env.BOT_USER_TOKEN }}
          prNumber: ${{ steps.pr.outputs.results }}
          output: ' '
          fileOutput: ' '
      - name: test
        run: |
          cat $HOME/files.txt
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
237,"on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9-dev, 3.10-dev]
    name: main
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        if: ""!endsWith(matrix.python-version, \'-dev\')""
        with:
          python-version: ${{ matrix.python-version }}
      - uses: deadsnakes/action@v3.0.1
        if: endsWith(matrix.python-version, \'-dev\')
        with:
          python-version: ${{ matrix.python-version }}
          # debug: true  # Optional, to select a Python debug build
      - run: python --version --version && which python
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
238,"$ composer normalize

name: ""Integrate""

on: ""push""

jobs:
  composer-normalize:
    name: ""composer-normalize""

    runs-on: ""ubuntu-latest""

    steps:
      - name: ""Checkout""
        uses: ""actions/checkout@v2""

      - name: ""Run composer normalize""
        uses: ""docker://ergebnis/composer-normalize-action:latest""

 name: ""Integrate""

 on: ""push""

 jobs:
   composer-normalize:
     name: ""composer-normalize""

     runs-on: ""ubuntu-latest""

     steps:
       - name: ""Checkout""
         uses: ""actions/checkout@v2.0.0""

       - name: ""Run composer normalize""
         uses: ""docker://ergebnis/composer-normalize-action:latest""
+        with:
+          args: ""--diff --dry-run --indent-size=2 --indent-style=space""

$ docker run --interactive --rm --tty --workdir=/app --volume ${PWD}:/app ergebnis/composer-normalize-action:latest

 name: Integrate

 on: push

 jobs:
   composer-normalize:
     name: ""composer-normalize""

     runs-on: ""ubuntu-latest""

     steps:
       - name: ""Checkout""
         uses: ""actions/checkout@v2""

       - name: ""Run composer normalize""
-        uses: ""docker://ergebnis/composer-normalize-action:latest""
+        uses: ""docker://ergebnis/composer-normalize-action:0.7.0""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
239,"  - uses: msys2/setup-msys2@v2

  - shell: msys2 {0}
    run: |
      uname -a

  - shell: powershell
    run: msys2 -c \'uname -a\'

  - shell: cmd
    run: msys2 -c \'uname -a\'

  defaults:
    run:
      shell: msys2 {0}
  steps:
  - uses: msys2/setup-msys2@v2
    with:
      update: true
      install: >-
        curl
        git
  - uses: actions/checkout@v3

  strategy:
    matrix:
      include:
        - { sys: mingw64, env: x86_64 }
        - { sys: mingw32, env: i686 }
        - { sys: ucrt64,  env: ucrt-x86_64 }
        - { sys: clang64, env: clang-x86_64 }
  steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        install: mingw-w64-${{matrix.env}}-openssl

  strategy:
    matrix:
      sys:
        - mingw64
        - mingw32
        - ucrt64
        - clang64
  steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        pacboy: openssl:p

  - uses: msys2/setup-msys2@v2
    with:
      msystem: UCRT64

  - uses: msys2/setup-msys2@v2
    with:
      msystem: MSYS
  - shell: msys2 {0}
    run: |
      makepkg-mingw -sCLfc --noconfirm --noprogressbar
      pacman --noconfirm -U mingw-w64-*-any.pkg.tar.xz
  - run: |
      set MSYSTEM=UCRT64
      msys2 -c \'<command to test the package>\'

  - uses: msys2/setup-msys2@v2
    with:
      update: true

  - uses: msys2/setup-msys2@v2
    with:
      update: true
      install: >-
        git
        curl

  strategy:
    fail-fast: false
    matrix:
      sys: [ MINGW64, MINGW32, UCRT64, CLANG64 ]
  steps:
  - uses: msys2/setup-msys2@v2
    with:
      msystem: ${{matrix.sys}}
      install: >-
        git
        curl
      pacboy: >-
        openssl:p

  - uses: msys2/setup-msys2@v2
    with:
      platform-check-severity: warn

  - uses: msys2/setup-msys2@v2
    with:
      path-type: minimal

  - uses: msys2/setup-msys2@v2
    with:
      cache: false

  - uses: msys2/setup-msys2@v2
    with:
      location: D:\\

  - uses: msys2/setup-msys2@v2
    with:
      release: false

  steps:
  - run: git config --global core.autocrlf input
  - uses: actions/checkout@v3
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
240,"uses: jesusvasquez333/verify-pr-label-action@v1.4.0
with:
    github-token: '${{ secrets.GITHUB_TOKEN }}'
    valid-labels: 'bug, enhancement'
    invalid-labels: 'help wanted, invalid'
    pull-request-number: '${{ github.event.pull_request.number }}'

on:
  pull_request_target:
   types: [opened, labeled, unlabeled, synchronize]

uses: jesusvasquez333/verify-pr-label-action@v1.4.0
with:
    github-token: '${{ secrets.GITHUB_TOKEN }}'
    valid-labels: 'bug, enhancement'
    invalid-labels: 'help wanted, invalid'

on:
  pull_request:
   types: [opened, labeled, unlabeled, synchronize]
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
241,"name: Pull Request Labels
on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: mheap/github-action-required-labels@v5
        with:
          mode: exactly
          count: 1
          labels: ""semver:patch, semver:minor, semver:major""

- uses: mheap/github-action-required-labels@v5
  with:
    mode: exactly
    count: 0
    labels: ""do not merge""

- uses: mheap/github-action-required-labels@v5
  with:
    mode: exactly
    count: 1
    labels: ""semver:patch, semver:minor, semver:major""
    add_comment: true

- uses: mheap/github-action-required-labels@v5
  with:
    mode: exactly
    count: 1
    labels: ""semver:patch, semver:minor, semver:major""
    add_comment: true
    message: ""This PR is being prevented from merging because you have added one of our blocking labels: {{ provided }}. You\'ll need to remove it before this PR can be merged.""

- uses: mheap/github-action-required-labels@v5
  with:
    mode: minimum
    count: 2
    labels: ""community-reviewed, team-reviewed, codeowner-reviewed""

- uses: mheap/github-action-required-labels@v5
  with:
    mode: minimum
    count: 2
    labels: ""community-reviewed, team-reviewed, codeowner-reviewed""
    exit_type: success # Can be: success or failure (default: failure)

name: Pull Request Labels
on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    outputs:
      status: ${{ steps.check-labels.outputs.status }}
    steps:
      - id: check-labels
        uses: mheap/github-action-required-labels@v5
        with:
          mode: exactly
          count: 1
          labels: ""semver:patch, semver:minor, semver:major""
          exit_type: success
  do-other:
    runs-on: ubuntu-latest
    needs: label
    steps:
      - run: echo SUCCESS
        if: needs.label.outputs.status == \'success\'
      - run: echo FAILURE && exit 1
        if: needs.label.outputs.status == \'failure\'

name: Pull Request Labels
on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
jobs:
  label:
    runs-on: ubuntu-latest
    steps:
      - id: check-labels
        uses: mheap/github-action-required-labels@v5
        with:
          mode: minimum
          count: 1
          labels: ""feature-1, feature-2, feature-3""
      - run: |
          echo ""Enabled Features:""
          for f in $(echo ""{{steps.check-labels.outputs.labels}}"" | sed ""s/,/ /g"")
          do
            echo ""$f""
          done
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
242,"name: Flarum Build

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master
      - uses: flarum/action-build@2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build_script: build # npm run build
          build_typings_script: build-typings # npm run build-typings
          test_script: test # npm run test
          package_manager: npm # Use NPM, not Yarn
          js_path: ./js # JS located in `./js`
          do_not_commit: false # Commit built JS by default
          commit_all_dirty: false

on:
  push:
    branches:
      - master
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
243,"jobs:
  publish:
    - uses: actions/checkout@master
    - uses: seanmiddleditch/gha-setup-ninja@master
    - run: |
      mkdir build
      cd build
      cmake -G Ninja ..
    - run: cmake --build build
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
244,"# .github/workflows/deploy.yml
name: Deploy

on: ['deployment']

jobs:
  deployment:

    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v1
    - name: 'use node 8.x'
      uses: actions/setup-node@v1
      with:
        node-version: 8.x

    - name: 'deployment pending'
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'pending'
        token: '${{ github.token }}'

    - name: 'deploy'
      run: |
        npm run deploy

    - name: 'deployment success'
      if: success()
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'success'
        token: '${{ github.token }}'

    - name: 'deployment failure'
      if: failure()
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'failure'
        token: '${{ github.token }}'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
245,"on: pull_request
jobs:
  check-pr:
    name: validate commits
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
    - run: git fetch origin master
    - uses: flux-framework/pr-validator@master
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
246,"name: website

on: push

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Gen dummy page
        run: |
          mkdir public
          cat > public/index.html <<EOL
          <!doctype html>
          <html>
            <head>
              <title>GitHub Pages deployed!</title>
            </head>
            <body>
              <p>GitHub Pages with <strong>${{ github.sha }}</strong> commit ID has been deployed through <a href=""https://github.com/marketplace/actions/github-pages"">GitHub Pages action</a> successfully.</p>
            </body>
          </html>
          EOL
      -
        name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      -
        name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Check GitHub Pages status
        uses: crazy-max/ghaction-github-status@v3
        with:
          pages_threshold: major_outage
      -
        name: Deploy to GitHub Pages
        if: success()
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
247,"name: goreleaser

on:
  pull_request:
  push:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v4
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          # either \'goreleaser\' (default) or \'goreleaser-pro\'
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the \'goreleaser-pro\' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

on:
  push:
    tags:
      - \'*\'

      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        if: startsWith(github.ref, \'refs/tags/\')
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

signs:
  - artifacts: checksum
    args: [""--batch"", ""-u"", ""{{ .Env.GPG_FINGERPRINT }}"", ""--output"", ""${signature}"", ""--detach-sign"", ""${artifact}""]

      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
          workdir: myfolder
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Upload assets
        uses: actions/upload-artifact@v3
        with:
          name: myapp
          path: myfolder/dist/*

steps:
  -
    name: Install GoReleaser
    uses: goreleaser/goreleaser-action@v4
    with:
      install-only: true
  -
    name: Show GoReleaser version
    run: goreleaser -v

      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

# format code and build javascript artifacts
docker buildx bake pre-checkin

# validate all code has correctly formatted and built
docker buildx bake validate

# run tests
docker buildx bake test
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
248,"steps:
  - uses: 8398a7/action-slack@v3
    with:
      status: ${{ job.status }}
      fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
    if: always() # Pick up events even if the job fails or is canceled.

steps:
  - uses: 8398a7/action-slack@v3
  with:
    status: custom
    fields: workflow,job,commit,repo,ref,author,took
    custom_payload: |
      {
        attachments: [{
          color: \'${{ job.status }}\' === \'success\' ? \'good\' : \'${{ job.status }}\' === \'failure\' ? \'danger\' : \'warning\',
          text: `${process.env.AS_WORKFLOW}\
${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
        }]
      }
  env:
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  if: always() # Pick up events even if the job fails or is canceled.

steps:
  - uses: 8398a7/action-slack@v3
    with:
      github_base_url: https://your.ghe.com # Specify your GHE
      status: ${{ job.status }}
      fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    if: always()

permissions:
  contents: read
  actions: read
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
249,"name: Create a Sentry.io release
uses: tclindner/sentry-releases-action@v1.2.0
env:
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG: myAwesomeOrg
  SENTRY_PROJECT: myAwesomeProject
with:
  tagName: ${{ github.ref }}
  environment: qa

name: ReleaseWorkflow

on:
  release:
    types: [published, prereleased]


jobs:
  createSentryRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create a Sentry.io release
        uses: tclindner/sentry-releases-action@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: myAwesomeOrg
          SENTRY_PROJECT: myAwesomeProject
        with:
          tagName: ${{ github.ref }}
          environment: qa

name: ReleaseWorkflow

on:
  release:
    types: [published, prereleased]


jobs:
  createSentryRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create a Sentry.io release
        uses: tclindner/sentry-releases-action@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: myAwesomeOrg
          SENTRY_PROJECT: myAwesomeProject
        with:
          tagName: ${{ github.ref }}
          environment: qa
          releaseNamePrefix: myAwesomeProject-

name: ReleaseWorkflow

on:
  release:
    types: [published, prereleased]


jobs:
  createSentryRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create a Sentry.io release
        uses: tclindner/sentry-releases-action@v1.2.0
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: myAwesomeOrg
          SENTRY_PROJECT: myAwesomeProject
        with:
          tagName: ${{ github.ref }}
          environment: qa
          releaseNamePrefix: myAwesomeProject-
          sourceMapOptions: \'{""include"": [""build""]}\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
250,"    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: tagName
        with:
          tagRegex: ""foobar-(.*)""  # Optional. Returns specified group text as tag name. Full tag string is returned if regex is not defined.
          tagRegexGroup: 1 # Optional. Default is 1.
      - name: Some other step # Output usage example
        with:
          tagname: ${{ steps.tagName.outputs.tag }}
      - name: Yet another step # Environment variabl usage example
        run: |
          docker build . --file Dockerfile --tag docker.pkg.github.com/someimage:$GIT_TAG_NAME


    steps:
      - uses: olegtarasov/get-tag@v2.1.2
        id: tagName
        with:
          tagRegex: ""(?<package>.*)-(?<version>.*)"" 
      - name: Some other step # Output usage example
        with:
          dirname: ${{ steps.tagName.outputs.package }}
          tagname: ${{ steps.tagName.outputs.version }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
251,"on: [push]
name: build
jobs:
  runhaskell:
    name: Hello World
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1.1
      - run: runhaskell Hello.hs

on: [push]
name: build
jobs:
  runhaskell:
    name: Hello World
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1.1
        with:
          ghc-version: \'8.8\' # Resolves to the latest point release of GHC 8.8
          cabal-version: \'3.0.0.0\' # Exact version of Cabal
      - run: runhaskell Hello.hs

on: [push]
name: build
jobs:
  runhaskell:
    name: Hello World
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-haskell@v1.1
        with:
          ghc-version: \'8.8.3\' # Exact version of ghc to use
          # cabal-version: \'latest\'. Omitted, but defalts to \'latest\'
          enable-stack: true
          stack-version: \'latest\'
      - run: runhaskell Hello.hs

on: [push]
name: build
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        ghc: [\'8.6.5\', \'8.8.3\']
        cabal: [\'2.4.1.0\', \'3.0.0.0\']
        os: [ubuntu-latest, macOS-latest, windows-latest]
        exclude:
          # GHC 8.8+ only works with cabal v3+
          - ghc: 8.8.3
            cabal: 2.4.1.0
    name: Haskell GHC ${{ matrix.ghc }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Setup Haskell
        uses: actions/setup-haskell@v1.1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
      - run: runhaskell Hello.hs
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
252,"- uses: julia-actions/setup-julia@v1
  with:
    # The Julia version that will be installed and added as `julia` to the PATH.
    # See ""Julia Versions"" below for a list of valid values.
    #
    # Warning: It is strongly recommended to wrap this value in quotes.
    #          Otherwise, the YAML parser used by GitHub Actions parses certain
    #          versions as numbers which causes the wrong version to be selected.
    #          For example, `1.0` may be parsed as `1`.
    #
    # Default: \'1\'
    version: \'\'

    # The architecture of the Julia binaries.
    #
    # Please note that installing aarch64 binaries only makes sense on self-hosted aarch64 runners.
    # We currently don\'t run test builds on that architecture, so we cannot guarantee that the input won\'t break randomly,
    # although there is no reason why it would.
    #
    # Supported values: x64 | x86 | aarch64 (untested)
    #
    # Note: you can use X64, X86, and ARM64 as synonyms for x64, x86, and aarch64, respectively.
    #
    # Defaults to the architecture of the runner executing the job.
    arch: \'\'

    # Set the display setting for printing InteractiveUtils.versioninfo() after installing.
    #
    # Starting Julia and running InteractiveUtils.versioninfo() takes a significant amount of time (1s or ~10% of the total build time in testing),
    # so you may not want to run it in every build, in particular on paid runners, as this cost will add up quickly.
    #
    # See ""versioninfo"" below for example usage and further explanations.
    #
    # Supported values: true | false | never
    #
    # true: Always print versioninfo
    # false: Only print versioninfo for nightly Julia
    # never: Never print versioninfo
    #
    # Default: false
    show-versioninfo: \'\'

outputs:
  # The installed Julia version.
  # May vary from the version input if a version range was given as input.
  #
  # Example output: \'1.5.3\'

  julia-version: \'\'
  # Path to the directory containing the Julia executable.
  # Equivalent to JULIA_BINDIR: https://docs.julialang.org/en/v1/manual/environment-variables/#JULIA_BINDIR
  #
  # Example output: \'/opt/hostedtoolcache/julia/1.5.3/x64/bin\'
  julia-bindir: \'\'

steps:
- uses: actions/checkout@v1.0.0
- uses: julia-actions/setup-julia@v1
  with:
    version: 1.0.4
- run: julia -e \'println(""Hello, World!"")\'

- uses: julia-actions/setup-julia@v1
  with:
    version: \'1\'
    include-all-prereleases: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [\'1.0\', \'1.2.0\', \'^1.3.0-rc1\']
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v1.0.0
      - name: ""Set up Julia""
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - run: julia -e \'println(""Hello, World!"")\'
        shell: bash

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [\'1.0\', \'1.2.0\', \'^1.3.0-rc1\']
        julia-arch: [x64, x86]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        # 32-bit Julia binaries are not available on macOS
        exclude:
          - os: macOS-latest
            julia-arch: x86

    steps:
      - uses: actions/checkout@v1.0.0
      - name: ""Set up Julia""
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - run: julia -e \'println(""Hello, World!"")\'
        shell: bash

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [\'1.0\', \'1.2.0\', \'^1.3.0-rc1\']
        os: [ubuntu-latest, windows-latest, macOS-latest]
        # Additionally create a job using 32-bit Julia 1.0.4 on windows-latest
        include:
          - os: windows-latest
            julia-version: [\'1.0.4\']
            julia-arch: x86

    steps:
      - uses: actions/checkout@v1.0.0
      - name: ""Set up Julia""
        uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - run: julia -e \'println(""Hello, World!"")\'
        shell: bash

steps:
  - uses: julia-actions/setup-julia@d3ce119a16594ea9e5d7974813970c73b6ab9e94 # commit SHA of the tagged 1.4.1 commit
  - uses: julia-actions/setup-julia@latest  # latest version tag (may break existing workflows)
  - uses: julia-actions/setup-julia@v1      # major version tag
  - uses: julia-actions/setup-julia@v1.4    # minor version tag
  - uses: julia-actions/setup-julia@v1.4.1  # specific version tag
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
253,"name: Run tests

on: [push, pull_request]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [stable, lts]
        julia-arch: [x64, x86]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        exclude:
          - os: macOS-latest
            julia-arch: x86

    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
254,"name: Run tests

on: 
  push:
    branches:
      - master
      - main
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: [\'1.0\', \'1\', \'nightly\']
        julia-arch: [x64, x86]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        exclude:
          - os: macOS-latest
            julia-arch: x86

    steps:
      - uses: actions/checkout@v2
      - uses: julia-actions/setup-julia@v1
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
        # with:
        #   annotate: true

      - uses: julia-actions/julia-runtest@v1
        with:
          prefix: xvfb-run

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        version: [\'1.0\', \'1\', \'nightly\']
        arch: [x64]
        include:
          - os: ubuntu-latest
            prefix: xvfb-run
    steps:
    # ...
      - uses: julia-actions/julia-runtest@v1
        with:
          prefix: ${{ matrix.prefix }}
    # ...
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
255,"
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info


      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: src,ext,examples
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info

      - uses: julia-actions/julia-processcoverage@v1
        with:
          directories: path/to/subdir/package/src
      - uses: codecov/codecov-action@v2
        with:
          files: lcov.info
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
256,"$ npm install

$ npm run build

$ npm test

 PASS  ./index.test.js
  \xe2\x9c\x93 throws invalid number (3ms)
  \xe2\x9c\x93 wait 500 ms (504ms)
  \xe2\x9c\x93 test runs (95ms)

...

import * as core from \'@actions/core\';
...

async function run() {
  try { 
      ...
  } 
  catch (error) {
    core.setFailed(error.message);
  }
}

run()

# comment out in distribution branches
# node_modules/

$ git checkout -b releases/v1
$ git commit -a -m ""prod dependencies""

$ npm prune --production
$ git add node_modules
$ git commit -a -m ""prod dependencies""
$ git push origin releases/v1

uses: actions/typescript-action@releases/v1
with:
  milliseconds: 1000

uses: actions/typescript-action@v1
with:
  milliseconds: 1000
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
257,"name: Documenter
on:
  push:
    branches: [master]
    tags: [v*]
  pull_request:

jobs:
  Documenter:
    permissions:
      contents: write
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: julia-actions/setup-julia@v1
        with:
          version: nightly               # replace this with whatever version you need
          show-versioninfo: true         # this causes versioninfo to be printed to the action log

      - uses: julia-actions/julia-docdeploy@v1
        with:
          prefix: xvfb-run

      - uses: julia-actions/julia-docdeploy@v1
        with:
          install-package: false

      - uses: julia-actions/julia-docdeploy@v1
        env:
          COLUMNS: '200'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
258,"name: TagBot
on:
  issue_comment:
    types:
      - created
  workflow_dispatch:
    inputs:
      lookback:
        default: 3
permissions:
  actions: read
  checks: read
  contents: write
  deployments: read
  issues: read
  discussions: read
  packages: read
  pages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read
jobs:
  TagBot:
    if: github.event_name == \'workflow_dispatch\' || github.actor == \'JuliaTagBot\'
    runs-on: ubuntu-latest
    steps:
      - uses: JuliaRegistries/TagBot@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Edit the following line to reflect the actual name of the GitHub Secret containing your private key
          ssh: ${{ secrets.DOCUMENTER_KEY }}
          # ssh: ${{ secrets.NAME_OF_MY_SSH_PRIVATE_KEY_SECRET }}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  ssh: ${{ secrets.SSH_KEY }}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  ssh: ${{ secrets.SSH_KEY }}
  ssh_password: ${{ secrets.SSH_PASSWORD }}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  changelog: |
    This is release {{ version }} of {{ package }}.
    {% if custom %}
    Here are my release notes!
    {{ custom }}
    {% endif %}

{
  ""compare_url"": ""https://github.com/Owner/Repo/compare/previous_version...current_version (or null for first release)"",
  ""custom"": ""your custom release notes"",
  ""issues"": [
    {
      ""author"": {
        ""name"": ""Real Name"",
        ""url"": ""https://github.com/username"",
        ""username"": ""their login""
      },
      ""body"": ""issue body"",
      ""labels"": [""label1"", ""label2""],
      ""closer"": {""same format as"": ""issue author but sometimes null""},
      ""number"": 123,
      ""title"": ""issue title"",
      ""url"": ""https://github.com/Owner/Repo/issues/123""
    }
  ],
  ""package"": ""PackageName"",
  ""previous_release"": ""v1.1.2 (or null for first release)"",
  ""pulls"": [
    {
      ""author"": {""same format as"": ""issue author""},
      ""body"": ""pull request body"",
      ""labels"": [""label1"", ""label2""],
      ""merger"": {""same format as"": ""issue author""},
      ""number"": 123,
      ""title"": ""pull request title"",
      ""url"": ""https://github.com/Owner/Repo/pull/123""
    }
  ],
  ""sha"": ""commit SHA"",
  ""version"": ""v1.2.3"",
  ""version_url"": ""https://github.com/Owner/Repo/tree/v1.2.3""
}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  changelog_ignore: ignore this label, ignore this label too

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  registry: MyOrg/MyRegistry

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  registry: MyOrg/MyRegistry
  registry_ssh: ${{ secrets.REGISTRY_SSH_KEY }}

with:
  github: git.corp.com
  github_api: api.git.corp.com

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  user: My Name
  email: my.email@web.site

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  draft: true

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  gpg: ${{ secrets.GPG_KEY }}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  gpg: ${{ secrets.GPG_KEY }}
  gpg_password: ${{ secrets.GPG_PASSWORD }}

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  lookback: 14

with:
  token: ${{ secrets.TAGBOT_PAT }}

with:
  token: ${{ secrets.TAGBOT_PAT }}
  dispatch: true

{
  ""v1.2.3"": ""abcdef0123456789abcdef0123456789abcdef01""
}

with:
  token: ${{ secrets.TAGBOT_PAT }}
  dispatch: true
  dispatch_delay: 30

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  branch: release

with:
  token: ${{ secrets.GITHUB_TOKEN }}
  branches: true

$ docker run --rm ghcr.io/juliaregistries/tagbot python -m tagbot.local --help
Usage: __main__.py [OPTIONS]

Options:
  --repo TEXT        Repo to tag
  --version TEXT     Version to tag
  --token TEXT       GitHub API token
  --github TEXT      GitHub URL
  --github-api TEXT  GitHub API URL
  --changelog TEXT   Changelog template
  --registry TEXT    Registry to search
  --help             Show this message and exit.

$ docker run --rm ghcr.io/juliaregistries/tagbot python -m tagbot.local \\
    --repo Owner/Name \\
    --token <TOKEN> \\
    --version v1.2.3

$ git clone https://github.com/JuliaRegistries/TagBot  # Consider --branch vA.B.C
$ cd TagBot
$ poetry install
$ poetry run python -m tagbot.local --help
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
259,"name: Bento
on: [pull_request]
jobs:
  bento:
    runs-on: ubuntu-latest
    name: Check
    steps:
    - uses: actions/checkout@v1
    - name: Bento
      id: bento
      uses: returntocorp/bento-action@v1
      with:
        acceptTermsWithEmail: <add your email here>
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
260,"  
on:
  schedule:
    - cron: \'*/5 * * * *\'

jobs:
  ping_site:
    runs-on: ubuntu-latest
    name: Ping the site
    steps:
    - name: Check the site
      id: hello
      uses: srt32/uptime@master
      with:
        url-to-hit: ""https://example.com""
        expected-statuses: ""200,301""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
261,"name: Format

on:
  push:
    branches: [ master ]

jobs:

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: ""--skip-sorting-imports --replace""
          # Recommended if you use MacOS:
          # github-token: ${{ secrets.GITHUB_TOKEN }}

name: Format

on: [ push, pull_request ]

jobs:

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: ""--set-exit-if-changed""

name: Format

on: [ push, pull_request ]

jobs:

  formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # v2 minimum required
      - uses: axel-op/googlejavaformat-action@v3
        with:
          args: ""--replace""
          skip-commit: true
      - name: Print diffs
        run: git --no-pager diff --exit-code

Options:
  -i, -r, -replace, --replace
    Send formatted output back to files, not stdout.
  --aosp, -aosp, -a
    Use AOSP style instead of Google Style (4-space indentation).
  --fix-imports-only
    Fix import order and remove any unused imports, but do no other formatting.
  --skip-sorting-imports
    Do not fix the import order. Unused imports will still be removed.
  --skip-removing-unused-imports
    Do not remove unused imports. Imports will still be sorted.
  --skip-reflowing-long-strings
    Do not reflow string literals that exceed the column limit.
  --skip-javadoc-formatting
    Do not reformat javadoc.
  --dry-run, -n
    Prints the paths of the files whose contents would change if the formatter were run normally.
  --set-exit-if-changed
    Return exit code 1 if there are any formatting changes.
  --lines, -lines, --line, -line
    Line range(s) to format, like 5:10 (1-based; default is all).
  --offset, -offset
    Character offset to format (0-based; default is all).
  --length, -length
    Character length to format.
  --help, -help, -h
    Print this usage statement.
  --version, -version, -v
    Print the version.
  @<filename>
    Read options and filenames from file.

The --lines, --offset, and --length flags may be given more than once.
The --offset and --length flags must be given an equal number of times.
If --lines, --offset, or --length are given, only one file may be given.
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
262,"workflow ""Python Lint"" {
  on = ""push""
  resolves = [""python-lint""]
}

action ""python-lint"" {
  uses = ""CyberZHG@github-action-python-lint@master""
}

workflow ""Python Lint"" {
  on = ""push""
  resolves = [""python-lint""]
}

action ""python-lint"" {
  uses = ""CyberZHG/github-action-python-lint@master""
  args = ""--max-line-length=120 source_folder_1_name source_folder_2_name ...""
}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
263,"name: golangci-lint
on:
  push:
    branches:
      - master
      - main
  pull_request:

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: \'1.20\'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0 

          # Optional: show only new issues if it\'s a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won\'t cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won\'t cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be \'binary\' or \'goinstall\'.
          # install-mode: ""goinstall""

name: golangci-lint
on:
  push:
    branches:
      - master
      - main
  pull_request:

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  golangci:
    strategy:
      matrix:
        go: [\'1.20\']
        os: [macos-latest, windows-latest]
    name: lint
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # 
          # Note: by default the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golangci.yml --issues-exit-code=0

          # Optional: show only new issues if it\'s a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional:The mode to install golangci-lint. It can be \'binary\' or \'goinstall\'.
          # install-mode: ""goinstall""

*.go text eol=lf
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
264,"steps:\r
- uses: actions/checkout@latest\r
- uses: geertvdc/setup-hub@master\r
\r
- run: hub --version\r

steps:\r
- uses: actions/checkout@v1\r
\r
- name: Install hub\r
    uses: geertvdc/setup-hub@master\r
    \r
- name: run hub commands\r
    env:\r
      GITHUB_USER: ${{ secrets.GITHUB_USER }}\r
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\r
    run: |\r
         hub release\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
265,"uses: getgauge/setup-gauge@master


uses: getgauge/setup-gauge@master
with:
    gauge-version: '1.0.7'

uses: getgauge/setup-gauge@master
with:
    gauge-version: '1.0.7'
    gauge-plugins: java, html-report

uses: getgauge/setup-gauge@master
with:
    gauge-version: master
    gauge-plugins: java, html-report
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
266,"# .github/workflows/deploy.yml
name: Deploy

on: ['deployment']

jobs:
  deployment:

    runs-on: 'ubuntu-latest'

    steps:
    - uses: actions/checkout@v1
    - name: 'use node 8.x'
      uses: actions/setup-node@v1
      with:
        node-version: 8.x

    - name: 'deployment pending'
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'pending'
        token: '${{ github.token }}'

    - name: 'deploy'
      run: |
        npm run deploy

    - name: 'deployment success'
      if: success()
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'success'
        token: '${{ github.token }}'

    - name: 'deployment failure'
      if: failure()
      uses: 'deliverybot/deployment-status@v1'
      with:
        state: 'failure'
        token: '${{ github.token }}'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
267,"name: Run tests\r
\r
on: [push]\r
\r
jobs:\r
  build:\r
    runs-on: ubuntu-latest\r
    strategy:\r
      matrix:\r
        node-version: [18.x, 20.x]\r
        redis-version: [6, 7]\r
\r
    steps:\r
    - name: Git checkout\r
      uses: actions/checkout@v2\r
\r
    - name: Use Node.js ${{ matrix.node-version }}\r
      uses: actions/setup-node@v1\r
      with:\r
        node-version: ${{ matrix.node-version }}\r
\r
    - name: Start Redis\r
      uses: supercharge/redis-github-action@1.6.0\r
      with:\r
        redis-version: ${{ matrix.redis-version }}\r
\r
    - run: npm install\r
\r
    - run: npm test\r
      env:\r
        CI: true\r

name: Run tests\r
\r
on: [push]\r
\r
jobs:\r
  build:\r
    runs-on: ubuntu-latest\r
    strategy:\r
      matrix:\r
        redis-version: [6.2.4-v4, 6.2.6-v3]\r
\r
    steps:\r
    - name: Start Redis\r
      uses: supercharge/redis-github-action@1.6.0\r
      with:\r
        redis-image: redis/redis-stack-server\r
        redis-version: ${{ matrix.redis-version }}\r
\r
    - name: \xe2\x80\xa6\r

name: Run tests\r
\r
on: [push]\r
\r
jobs:\r
  build:\r
    runs-on: ubuntu-latest\r
    strategy:\r
      matrix:\r
        redis-version: [6, 7]\r
\r
    steps:\r
    - name: Start Redis\r
      uses: supercharge/redis-github-action@1.6.0\r
      with:\r
        redis-version: ${{ matrix.redis-version }}\r
        redis-port: 12345\r
\r
    - name: \xe2\x80\xa6\r

name: Run tests\r
\r
on: [push]\r
\r
jobs:\r
  build:\r
    runs-on: ubuntu-latest\r
    strategy:\r
      matrix:\r
        redis-version: [6, 7]\r
\r
    steps:\r
    - name: Start Redis\r
      uses: supercharge/redis-github-action@1.6.0\r
      with:\r
        redis-version: ${{ matrix.redis-version }}\r
        redis-container-name: redis-auth-token-cache\r
\r
    - name: \xe2\x80\xa6\r

name: Run tests\r
\r
on: [push]\r
\r
jobs:\r
  build:\r
    runs-on: ubuntu-latest\r
    strategy:\r
      matrix:\r
        redis-version: [6, 7]\r
\r
    steps:\r
    - name: Start Redis\r
      uses: supercharge/redis-github-action@1.6.0\r
      with:\r
        redis-version: ${{ matrix.redis-version }}\r
        redis-remove-container: true # false by default\r
\r
    - name: \xe2\x80\xa6\r
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
268,"name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install
        run: yarn
      - name: Percy Test
        uses: percy/exec-action@v0.3.1
        with:
          command: ""[your-test-command]""
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install
        run: yarn
      - name: Percy Test
        run: npx percy exec -- [your-test-command]
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}

name: CI
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Install
        run: yarn
      - name: Percy Test
        uses: percy/exec-action@v0.3.1
        with:
          command: ""cypress run""
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
269,"steps:
- uses: actions/checkout@v3
- uses: volta-cli/action@v4
- run: npm install
- run: npm test

steps:
- uses: actions/checkout@v3
- uses: volta-cli/action@v4
  with:
    node-version: 18.x
    yarn-version: 1.19.1

- run: yarn install
- run: yarn test

strategy:
  matrix:
    node-version: [\'^14.10\', \'16\', \'18\']

steps:
- uses: actions/checkout@v3
- uses: volta-cli/action@v4
  with:
    node-version: ${{ matrix.node-version }}

- run: npm install
- run: npm test

strategy:
  matrix:
    node-version: [\'^8.12\', \'10\', \'12\']

steps:
- uses: actions/checkout@v3
- uses: volta-cli/action@v4
  with:
    node-version: ${{ matrix.node-version }}
    npm-version: \'7\'

- run: npm install
- run: npm test

steps:
- uses: actions/checkout@v3
- uses: volta-cli/action@v4
  with:
    variant: \'linux-openssl-rhel\'

- run: yarn install
- run: yarn test
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
270,"  - name: Save snapshots
    if: always()
    uses: actions/upload-artifact@v2
    with:
      save-only: true
      path: .artifacts/visual-snapshots

    visual-diff:
      if: ${{ github.ref != \'refs/heads/master\' }}
      needs: acceptance
      runs-on: ubuntu-16.04

      steps:
        - name: Diff snapshots
          id: visual-snapshots-diff
          uses: getsentry/action-visual-snapshot@v1
          with:
            gcs-bucket: \'sentry-visual-snapshots\'
            gcp-service-account-key: ${{ secrets.SNAPSHOT_GOOGLE_SERVICE_ACCOUNT_KEY }}

  - name: Diff snapshots
    id: visual-snapshots-diff
    uses: getsentry/action-visual-snapshot@v1
    with:
      snapshot-path: .artifacts/visual-snapshots-jest
      action-name: Jest Snapshots
      artifact-name: visual-snapshots-jest

yarn dev:gallery && open example_gallery/index.html

$ yarn dist
$ git add dist
$ git commit -a -m ""prod dependencies""

#!/bin/bash
set -e

rm -rf /tmp/visual-snapshots-*
rm -rf .tmp/snaps
rm -rf ""<< Results Path >>""

yarn dist

GITHUB_REPOSITORY=""getsentry/sentry"" \\
GITHUB_HEAD_SHA=""<< Commit >>"" \\
GITHUB_HEAD_REF=""getsentry/sentry/master"" \\
GITHUB_WORKFLOW=""visual-snapshots"" \\
GITHUB_WORKSPACE=""."" \\
ACTION_SAVE_ONLY=""false"" \\
ACTION_GITHUB_TOKEN=""<< GitHub Token >>"" \\
ACTION_ARTIFACT_NAME=""visual-snapshots"" \\
ACTION_BASE_ARTIFACT_NAME=""visual-snapshots-base"" \\
ACTION_THRESHOLD=""0.05"" \\
ACTION_SNAPSHOT_PATH=""<< Snapshot Path >>"" \\
ACTION_LOCAL_RUN=""true"" \\
ACTION_RESULTS_PATH=""<< Results Path >>"" \\
node ./dist/index.js
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
271,"docker build -t action-html-to-image .
docker run \\
     -ti \\
    --rm \\
    -v ""$PWD/html/:/html:rw"" \\
    -e GITHUB_WORKSPACE=/html \\
    -e INPUT_BASE-PATH=/html \\
    -e INPUT_CSS-PATH=t.css \\
    -e DEBUG=""puppeteer:*"" \\
    action-html-to-image

       - name: Create Images from HTML
-        uses: getsentry/action-html-to-image@main
+        uses: docker://ghcr.io/getsentry/action-html-to-image:0de1c39c28d4d8f8f42c49761313237840958927
         with:
           base-path: .artifacts/visual-snapshots/jest
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
272,"$ yarn

$ yarn dist

  - name: my-app-install token
    id: my-app
    uses: getsentry/action-github-app-token@v2
    with:
      app_id: ${{ secrets.APP_ID }}
      private_key: ${{ secrets.APP_PRIVATE_KEY }}

  - name: Checkout private repo
    uses: actions/checkout@v2
    with:
      repository: getsentry/my-private-repo
      token: ${{ steps.my-app.outputs.token }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
273,"    - name: Use current action
      uses: getsentry/action-eslint-fix@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Use current action
      uses: getsentry/action-eslint-fix@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        dry: true
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
274,"""scripts"": {
  ""postinstall"": ""lerna bootstrap"",
  ""build"": ""lerna run build""
},

""size-limit"": [
  {
    ""path"": ""dist/index.js"",
    ""limit"": ""4500 ms""
  }
]

name: ""size""
on:
  pull_request:
    branches:
      - master
jobs:
  size:
    runs-on: ubuntu-latest
    env:
      CI_JOB_NUMBER: 1
    steps:
      - uses: actions/checkout@v1
      - uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

with:
  github_token: ${{ secrets.GITHUB_TOKEN }}
  build_script: custom-build
  skip_step: install

with:
  github_token: ${{ secrets.GITHUB_TOKEN }}
  clean_script: cleanup

with:
  github_token: ${{ secrets.GITHUB_TOKEN }}
  build_script: custom-build
  skip_step: install
  directory: client/
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
275,"$ yarn

$ yarn build

$ yarn test
...

$ yarn build
$ git add dist
$ git commit -a -m ""prod dependencies""
$ git push origin main

  - name: Generate SQL for migration
    uses: getsentry/action-migrations@v1.0.7
    env:
      SENTRY_LOG_LEVEL: ERROR
      PGPASSWORD: postgres
    with:
      githubToken: ${{ secrets.GITHUB_TOKEN }}
      migration: ""./path/to/migration""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
276,"yarn global add @sentry/craft

npm install -g @sentry/craft

$ craft -h
craft <command>

Commands:
  craft prepare NEW-VERSION  \xf0\x9f\x9a\xa2 Prepare a new release branch
                          [aliases: p, prerelease, prepublish, prepare, release]
  craft publish NEW-VERSION  \xf0\x9f\x9b\xab Publish artifacts         [aliases: pp, publish]
  craft targets              List defined targets as JSON array
  craft config               Print the parsed, processed, and validated Craft
                             config for the current project in pretty-JSON.
  craft artifacts <command>  \xf0\x9f\x93\xa6 Manage artifacts          [aliases: a, artifact]

Options:
  --no-input     Suppresses all user prompts                    [default: false]
  --dry-run      Dry run mode: do not perform any real actions
  --log-level    Logging level
          [choices: ""Fatal"", ""Error"", ""Warn"", ""Log"", ""Info"", ""Success"", ""Debug"",
                                 ""Trace"", ""Silent"", ""Verbose""] [default: ""Info""]
  -v, --version  Show version number                                   [boolean]
  -h, --help     Show help                                             [boolean]

CRAFT_LOG_LEVEL=Debug
CRAFT_DRY_RUN=1
CRAFT_NO_INPUT=0

# ~/.craft.env
GITHUB_TOKEN=token123
export NUGET_API_TOKEN=abcdefgh

craft prepare NEW-VERSION

\xf0\x9f\x9a\xa2 Prepare a new release branch

Positionals:
  NEW-VERSION  The new version you want to release           [string] [required]

Options:
  --no-input       Suppresses all user prompts                  [default: false]
  --dry-run        Dry run mode: do not perform any real actions
  --log-level      Logging level
          [choices: ""Fatal"", ""Error"", ""Warn"", ""Log"", ""Info"", ""Success"", ""Debug"",
                                 ""Trace"", ""Silent"", ""Verbose""] [default: ""Info""]
  --rev, -r        Source revision (git SHA or tag) to prepare from (if not
                   branch head)                                         [string]
  --no-push        Do not push the release branch     [boolean] [default: false]
  --no-git-checks  Ignore local git changes and unsynchronized remotes
                                                      [boolean] [default: false]
  --no-changelog   Do not check for changelog entries [boolean] [default: false]
  --publish        Run ""publish"" right after ""release""[boolean] [default: false]
  --remote         The git remote to use when pushing
                                                    [string] [default: ""origin""]
  -v, --version    Show version number                                 [boolean]
  -h, --help       Show help                                           [boolean]

craft publish NEW-VERSION

\xf0\x9f\x9b\xab Publish artifacts

Positionals:
  NEW-VERSION  Version to publish                            [string] [required]

Options:
  --no-input         Suppresses all user prompts                [default: false]
  --dry-run          Dry run mode: do not perform any real actions
  --log-level        Logging level
          [choices: ""Fatal"", ""Error"", ""Warn"", ""Log"", ""Info"", ""Success"", ""Debug"",
                                 ""Trace"", ""Silent"", ""Verbose""] [default: ""Info""]
  --target, -t       Publish to this target
    [string] [choices: ""npm"", ""gcs"", ""registry"", ""docker"", ""github"", ""gh-pages"",
                                                 ""all"", ""none""] [default: ""all""]
  --rev, -r          Source revision (git SHA or tag) to publish (if not release
                     branch head)                                       [string]
  --no-merge         Do not merge the release branch after publishing
                                                      [boolean] [default: false]
  --keep-branch      Do not remove release branch after merging it
                                                      [boolean] [default: false]
  --keep-downloads   Keep all downloaded files        [boolean] [default: false]
  --no-status-check  Do not check for build status    [boolean] [default: false]
  -v, --version      Show version number                               [boolean]
  -h, --help         Show help                                         [boolean]

github:
  owner: getsentry
  repo: sentry-javascript

preReleaseCommand: bash scripts/bump-version.sh

postReleaseCommand: bash scripts/post-release.sh

releaseBranchPrefix: publish

changelog: CHANGES
changelogPolicy: simple

## 1.3.5

* Removed something

## 1.3.4

* Added something

changelog: CHANGES
changelogPolicy: auto

## Unreleased

* Removed something

## 1.3.4

* Added something

minVersion: \'0.5.0\'

requireNames:
  - /^sentry-craft.*\\.tgz$/
  - /^gh-pages.zip$/

statusProvider:
  name: github
  config:
    contexts:
      - Travis CI - Branch

artifactProvider:
  name: none

targets:
  - name: npm
  - name: github
  - name: registry
    id: browser
    type: sdk
    onlyIfPresent: /^sentry-browser-.*\\.tgz$/
    includeNames: /\\.js$/
    checksums:
      - algorithm: sha384
        format: base64
    config:
      canonical: \'npm:@sentry/browser\'
  - name: registry
    id: node
    type: sdk
    onlyIfPresent: /^sentry-node-.*\\.tgz$/
    config:
      canonical: \'npm:@sentry/node\'

targets:
  - name: github
    includeNames: /^.*\\.exe$/
    excludeNames: /^test.exe$/

targets:
  - name: github
    tagPrefix: v
    previewReleases: false

targets:
  - name: npm
    access: public

targets:
  - name: pypi

targets:
  - name: pypi
  - name: sentry-pypi
    internalPypiRepo: getsentry/pypi

targets:
  - name: brew
    tap: octocat/tools # Expands to github.com:octocat/homebrew-tools
    formula: myproject # Creates the file myproject.rb
    path: HomebrewFormula # Creates the file in HomebrewFormula/
    template: >
      class MyProject < Formula
        desc ""This is a test for homebrew formulae""
        homepage ""https://github.com/octocat/my-project""
        url ""https://github.com/octocat/my-project/releases/download/{{version}}/binary-darwin""
        version ""{{version}}""
        sha256 ""{{checksums.binary-darwin}}""

        def install
          mv ""binary-darwin"", ""myproject""
          bin.install ""myproject""
        end
      end

targets:
  - name: nuget

targets:
  - name: crates
    noDevDeps: false

targets:
  - name: gcs
    bucket: bucket-name
    paths:
      - path: release/{{version}}/download
        metadata:
          cacheControl: `public, max-age=3600`
      - path: release/{{revision}}/platform/package

targets:
  - name: gh-pages
    branch: gh-pages

targets:
  - name: registry
    sdks:
      \'npm:@sentry/browser\':
    apps:
      \'npm:@sentry/browser\':
        urlTemplate: \'https://example.com/{{version}}/{{file}}\'
        checksums:
          - algorithm: sha256
            format: hex

targets:
  - name: cocoapods
    specPath: MyProject.podspec

targets:
  - name: docker
    source: us.gcr.io/sentryio/craft
    target: getsentry/craft
# Optional but strongly recommended
statusProvider:
  name: github
  config:
    contexts:
      - Travis CI - Branch # or whatever builds and pushes your source image

targets:
  - name: gem

targets:
  - name: aws-lambda-layer
    includeNames: /^sentry-node-serverless-\\d+(\\.\\d+)*\\.zip$/
    layerName: SentryNodeServerlessSDK
    compatibleRuntimes:
      - name: node
        versions:
          - nodejs10.x
          - nodejs12.x
    license: MIT

targets:
  - name: upm
    releaseRepoOwner: \'getsentry\'
    releaseRepoName: \'unity\'

targets:
  - name: maven
    mavenCliPath: scripts/mvnw.cmd
    mavenSettingsPath: scripts/settings.xml
    mavenRepoId: ossrh
    mavenRepoUrl: https://oss.sonatype.org/service/local/staging/deploy/maven2/
    android: false

targets:
  - name: maven
    mavenCliPath: scripts/mvnw.cmd
    mavenSettingsPath: scripts/settings.xml
    mavenRepoId: ossrh
    mavenRepoUrl: https://oss.sonatype.org/service/local/staging/deploy/maven2/
    android:
      distDirRegex: /^sentry-android-.*$/
      fileReplaceeRegex: /\\d\\.\\d\\.\\d(-SNAPSHOT)?/
      fileReplacerStr: release.aar

targets:
  - name: maven
    mavenCliPath: scripts/mvnw.cmd
    mavenSettingsPath: scripts/settings.xml
    mavenRepoId: ossrh
    mavenRepoUrl: https://oss.sonatype.org/service/local/staging/deploy/maven2/
    android:
      distDirRegex: /^sentry-android-.*$/
      fileReplaceeRegex: /\\d\\.\\d\\.\\d(-SNAPSHOT)?/
      fileReplacerStr: release.aar
    kmp:
      rootDistDirRegex: /sentry-kotlin-multiplatform-[0-9]+.*$/
      appleDistDirRegex: /sentry-kotlin-multiplatform-(macos|ios|tvos|watchos).*/

targets:
  - name: symbol-collector
    includeNames: /libsentry(-android)?\\.so/
    batchType: Android
    bundleIdPrefix: android-ndk-

targets:
  - name: pub-dev
    packages:
      uno:
      dos:
      tres:

targets:
  - name: hex

on:
  push:
    branches:
      - \'release/**\'

- name: Archive Artifacts
  uses: actions/upload-artifact@v2
  with:
    name: ${{ github.sha }}
    path: |
      ${{ github.workspace }}/*.tgz
      ${{ github.workspace }}/packages/tracing/build/**
      ${{ github.workspace }}/packages/**/*.tgz

#!/bin/bash
### Example of a version-bumping script for an NPM project.
### Located at: ./scripts/bump-version.sh
set -eux
OLD_VERSION=""${1}""
NEW_VERSION=""${2}""

# Do not tag and commit changes made by ""npm version""
export npm_config_git_tag_version=false
npm version ""${NEW_VERSION}""

#!/bin/bash
### Example of a dev-version-bumping script for a Python project
### Located at: ./scripts/post-release.sh
set -eux
OLD_VERSION=""${1}""
NEW_VERSION=""${2}""

# Ensure master branch
git checkout master
# Advance the CalVer release by one-month and add the `.dev0` suffix
./scripts/bump-version.sh \'\' $(date -d ""$(echo $NEW_VERSION | sed -e \'s/^\\([0-9]\\{2\\}\\)\\.\\([0-9]\\{1,2\\}\\)\\.[0-9]\\+$/20\\1-\\2-1/\') 1 month"" +%y.%-m.0.dev0)
# Only commit if there are changes, make sure to `pull --rebase` before pushing to avoid conflicts
git diff --quiet || git commit -anm \'meta: Bump new development version\' && git pull --rebase && git push

export CRAFT_SENTRY_DSN=\'https://1234@sentry.io/2345\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
277,"on:
  push:
    tags: \'v*\'

jobs:
  homebrew:
    name: Bump Homebrew formula
    runs-on: ubuntu-latest
    steps:
      - uses: mislav/bump-homebrew-formula-action@v2
        with:
          # A PR will be sent to github.com/Homebrew/homebrew-core to update this formula:
          formula-name: my_formula
        env:
          # the personal access token should have ""repo"" & ""workflow"" scopes
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}

on:
  push:
    tags: \'v*\'

jobs:
  homebrew:
    name: Bump Homebrew formula
    runs-on: ubuntu-latest
    steps:
      - name: Extract version
        id: extract-version
        run: |
          printf ""::set-output name=%s::%s\
"" tag-name ""${GITHUB_REF#refs/tags/}""
      - uses: mislav/bump-homebrew-formula-action@v2
        if: ${{ !contains(github.ref, \'-\') }} # skip prereleases
        with:
          formula-name: my_formula
          formula-path: Formula/my_formula.rb
          homebrew-tap: Homebrew/homebrew-core
          base-branch: master
          download-url: https://example.com/foo/${{ steps.extract-version.outputs.tag-name }}.tar.gz
          commit-message: |
            {{formulaName}} {{version}}

            Created by https://github.com/mislav/bump-homebrew-formula-action
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

{{formulaName}} {{version}}
Created by https://github.com/mislav/bump-homebrew-formula-action

class MyFormula < Formula
  url ""https://github.com/me/myproject/archive/v1.2.3.tar.gz""
  sha256 ""<OLDSHA>""
  # ...
end

class MyFormula < Formula
  url ""https://github.com/me/myproject/archive/v2.0.0.tar.gz""
  sha256 ""<NEWSHA>""
  # ...
end

on:
  workflow_dispatch:
    inputs:
      tag-name:
        description: \'The git tag name to bump the formula to\'
        required: true

jobs:
  homebrew:
    name: Bump Homebrew formula
    runs-on: ubuntu-latest
    steps:
      - uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: my_formula
          tag-name: ${{ github.event.inputs.tag-name }}
          download-url: https://example.com/foo/${{ github.event.inputs.tag-name }}.tar.gz
        env:
          COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
278,"name: Test Rust project
on: [push]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable, nightly]

    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master
    - name: Run tests
      run: cargo test --verbose
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
279,"name: test-clang-format

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: DoozyX/clang-format-lint-action@v0.5
      with:
        source: '.'
        exclude: './third_party'
        extensions: 'h,cpp'
        clangFormatVersion: 9
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
280,"name: Example Workflow

on: [push]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v1

    - name: Build
      id: build
      uses: gocom/action-textpattern-package-plugin@master

    - name: Print Built Installers
      run: |
        cat ${{ github.workspace }}/${{ steps.build.outputs.compressed }}
        cat ${{ github.workspace }}/${{ steps.build.outputs.uncompressed }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
281,"jobs:
  example:
    runs-on: ubuntu-latest
    steps:
    - name: Setup bazel
      uses: jwlawson/actions-setup-bazel@v1
      with:
        bazel-version: '2.0.0'
    - name: Use bazel
      run: bazel --version
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
282,"name: Auto approve
on: pull_request_target

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: hmarr/auto-approve-action@v3

name: Auto approve

on: pull_request_target

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.actor == \'dependabot[bot]\'
    steps:
      - uses: hmarr/auto-approve-action@v3

name: Auto approve

on:
  workflow_dispatch:
    inputs: 
      pullRequestNumber:
        description: Pull request number to auto-approve
        required: false

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
    - uses: hmarr/auto-approve-action@v3
      with:
        pull-request-number: ${{ github.event.inputs.pullRequestNumber }}

name: Auto approve

on: pull_request_target

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.actor == \'dependabot[bot]\'
    steps:
      - uses: hmarr/auto-approve-action@v3
        with:
          review-message: ""Auto approved automated PR""

name: Auto approve

on: pull_request_target

jobs:
  auto-approve:
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.SOME_USERS_PAT }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
283,"steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

{
  ""publishConfig"": {
    ""registry"": ""https://npm.pkg.github.com""
  }
}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      semantic_version: 19.0.5  # It is recommended to specify a version range
                                # for semantic-release when using
                                # semantic-release-action lower than @v3
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      semantic_version: 16
      # you can set branches for semantic-release above v16.
      branches: |
        [
          \'+([0-9])?(.{+([0-9]),x}).x\',
          \'master\',
          \'next\',
          \'next-major\',
          {
            name: \'beta\',
            prerelease: true
          },
          {
            name: \'alpha\',
            prerelease: true
          }
        ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

[
  \'+([0-9])?(.{+([0-9]),x}).x\',
  \'master\',
  \'next\',
  \'next-major\',
  {name: \'beta\', prerelease: true},
  {name: \'alpha\', prerelease: true}
]

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      semantic_version: 15.13.28
      # you can set branch for semantic-release older than v16.
      branch: your-branch
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      # You can specify specifying version range for the extra plugins if you prefer.
      extra_plugins: |
        @semantic-release/changelog@6.0.0
        @semantic-release/git
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  plugins: [
    .
+   ""@semantic-release/changelog""
+   ""@semantic-release/git"",
  ]

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      dry_run: true
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      ci: false
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      # You can extend an existing shareable configuration.
      # And you can specify version range for the shareable configuration if you prefer.
      extends: |
        @semantic-release/apm-config@^9.0.0
        @mycompany/override-config
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      # You can select another working directory like a subdirectory for example.
      working_directory: ./code
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    with:
      tag_format: custom-v${version}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - name: Checkout
    uses: actions/checkout@v3
  - name: Semantic Release
    uses: cycjimmy/semantic-release-action@v3
    id: semantic   # Need an `id` for output variables
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  - name: Do something when a new release published
    if: steps.semantic.outputs.new_release_published == \'true\'
    run: |
      echo ${{ steps.semantic.outputs.new_release_version }}
      echo ${{ steps.semantic.outputs.new_release_major_version }}
      echo ${{ steps.semantic.outputs.new_release_minor_version }}
      echo ${{ steps.semantic.outputs.new_release_patch_version }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
284,"# .github/workflows/test.yml 

on:
  push:
    branches:
      - master
  pull_request:

name: Test

jobs:
  phpstan:
    name: PHPStan

    runs-on: ubuntu-latest

    steps:
    - name: ""Checkout""
      uses: actions/checkout@v2

    - name: PHPStan
      uses: docker://oskarstark/phpstan-ga
      with:
        args: analyse src/

      uses: docker://oskarstark/phpstan-ga
      with:
-        args: analyse src/
+        args: analyse src/ --level=5

      uses: docker://oskarstark/phpstan-ga
+     env:
+       REQUIRE_DEV: true
      with:
        args: analyse src/

      uses: docker://oskarstark/phpstan-ga
+     env:
+        CHECK_PLATFORM_REQUIREMENTS: false
      with:
        args: analyse src/
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
285,"workflow ""My build"" {
  resolves = [
    ""git command"",
  ]
  on = ""push""
}

action ""git command"" {
  uses = ""srt32/git-actions@v0.0.3""
  args = ""git status""
}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
286,"on: push
name: \xf0\x9f\x9a\x80 Deploy website on push
jobs:
  web-deploy:
    name: \xf0\x9f\x8e\x89 Deploy
    runs-on: ubuntu-latest
    steps:
    - name: \xf0\x9f\x9a\x9a Get latest code
      uses: actions/checkout@v3
    
    - name: \xf0\x9f\x93\x82 Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.samkirkland.com
        username: myFtpUserName
        password: ${{ secrets.ftp_password }}

on: push
name: \xf0\x9f\x9a\x80 Deploy website on push
jobs:
  web-deploy:
    name: \xf0\x9f\x8e\x89 Deploy
    runs-on: ubuntu-latest
    steps:
    - name: \xf0\x9f\x9a\x9a Get latest code
      uses: actions/checkout@v3

    - name: Use Node.js 16
      uses: actions/setup-node@v2
      with:
        node-version: \'16\'
      
    - name: \xf0\x9f\x94\xa8 Build Project
      run: |
        npm install
        npm run build
    
    - name: \xf0\x9f\x93\x82 Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.samkirkland.com
        username: myFtpUserName
        password: ${{ secrets.password }}

on: push
name: \xf0\x9f\x9a\x80 Deploy website on push
jobs:
  web-deploy:
    name: \xf0\x9f\x8e\x89 Deploy
    runs-on: ubuntu-latest
    steps:
    - name: \xf0\x9f\x9a\x9a Get latest code
      uses: actions/checkout@v3

    - name: \xf0\x9f\x93\x82 Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.samkirkland.com
        username: myFtpUserName
        password: ${{ secrets.password }}
        protocol: ftps
        port: 1234 # todo replace with your web hosts ftps port

on: push
name: \xf0\x9f\x9a\x80 Deploy website on push
jobs:
  web-deploy:
    name: \xf0\x9f\x8e\x89 Deploy
    runs-on: ubuntu-latest
    steps:
    - name: \xf0\x9f\x9a\x9a Get latest code
      uses: actions/checkout@v3

    - name: \xf0\x9f\x93\x82 Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.samkirkland.com
        username: myFtpUserName
        password: ${{ secrets.password }}
        dry-run: true

on: push
name: \xf0\x9f\x9a\x80 Deploy website on push
jobs:
  web-deploy:
    name: \xf0\x9f\x8e\x89 Deploy
    runs-on: ubuntu-latest
    steps:
    - name: \xf0\x9f\x9a\x9a Get latest code
      uses: actions/checkout@v3

    - name: \xf0\x9f\x93\x82 Sync files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.samkirkland.com
        username: myFtpUserName
        password: ${{ secrets.password }}
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          fileToExclude.txt

exclude: |
  **/.git*
  **/.git*/**
  **/node_modules/**

[<img alt=""Deployed with FTP Deploy Action"" src=""https://img.shields.io/badge/Deployed With-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=0077b6"">](https://github.com/SamKirkland/FTP-Deploy-Action)

[<img alt=""Deployed with FTP Deploy Action"" src=""https://img.shields.io/badge/Deployed With-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=2b9348"">](https://github.com/SamKirkland/FTP-Deploy-Action)

[<img alt=""Deployed with FTP Deploy Action"" src=""https://img.shields.io/badge/Deployed With-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=d00000"">](https://github.com/SamKirkland/FTP-Deploy-Action)

[<img alt=""Website Deployed for Free with FTP Deploy Action"" src=""https://img.shields.io/badge/Website deployed for free with-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=297FA9"">](https://github.com/SamKirkland/FTP-Deploy-Action)

[<img alt=""Website Deployed for Free with FTP Deploy Action"" src=""https://img.shields.io/badge/Website deployed for free with-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=2b9348"">](https://github.com/SamKirkland/FTP-Deploy-Action)

[<img alt=""Website Deployed for Free with FTP Deploy Action"" src=""https://img.shields.io/badge/Website deployed for free with-FTP DEPLOY ACTION-%3CCOLOR%3E?style=for-the-badge&color=d00000"">](https://github.com/SamKirkland/FTP-Deploy-Action)

exclude:
 - *.txt

on: push
name: Publish Website
jobs:
  web-deploy:
    name: web-deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15 # time out after 15 minutes (default is 360 minutes)
    steps:
      ....
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
287,"
name: Deploy Nightly
on:
  schedule:
    - cron: \'0 2 * * *\' # run at 2 AM UTC

jobs:
  nightly:
    name: Deploy nightly
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
      ... # build your asset first

      - name: Deploy Windows release
        if: matrix.os == \'windows-latest\'
        uses: WebFreak001/deploy-nightly@v2.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
        with:
          upload_url: https://uploads.github.com/repos/Pure-D/serve-d/releases/20717582/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full ""upload_url"" value including the {?name,label} part
          release_id: 20717582 # same as above (id can just be taken out the upload_url, it\'s used to find old releases)
          asset_path: ./myapp.zip # path to archive to upload
          asset_name: myapp_windows-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 7 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
288,"name: Deploy via ftp
on: push
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Upload ftp
      uses: sebastianpopp/ftp-action@releases/v2
      with:
        host: ${{ secrets.FTP_SERVER }}
        user: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        localDir: ""dist""
        remoteDir: ""www""
        options: ""--delete --asci""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
289,"- name: Download a file
  uses: carlosperate/download-file-action@v2
  with:
    file-url: \'https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py\'
- name: Check the file is there
  run: ls -l get-poetry.py

- name: Download a file
  uses: carlosperate/download-file-action@v2
  id: download-file
  with:
    file-url: \'https://github.com/carlosperate/download-file-action/archive/refs/tags/v1.0.3.tar.gz\'
    file-name: \'new_filename.tar.gz\'
    location: \'./new-folder-to-be-created\'
    md5: \'e3b51204dedc75588ca164a26b51610d\'
    sha256: \'76ef5cf6e910a4955f713fb36cca6f90ffeee6ffafe743754716e149d68136de\'
- name: Print the file path (new-folder-to-be-created/new_filename.tar.gz)
  run: echo ""The file was downloaded to ${{ steps.download-file.outputs.file-path }}""
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
290,"  # Option 1: using \'latest\' branch, the most recent CMake and ninja are installed.
    - uses: lukka/get-cmake@latest  # <--= Just this one-liner suffices.

    # Suited for self-hosted GH runners where the local cache wins over the cloud.
    - uses: lukka/get-cmake@latest  
      with:
        useLocalCache: true         # <--= Use the local cache (default is \'false\').
        useCloudCache: false        # <--= Ditch the cloud cache (default is \'true\').

  # Option 2: specify \'latest\' or \'latestrc\' in the input version arguments:
    - name: Get latest CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latestrc      # <--= optional, use the latest release candidate (notice the \'rc\' suffix).
        ninjaVersion: latest        # <--= optional, use the latest release (non candidate).

  # Option 1: specify in a input parameter the desired version using ranges.
  - uses: lukka/get-cmake@latest
    with:
      cmakeVersion: ""~3.25.0""  # <--= optional, use most recent 3.25.x version
      ninjaVersion: ""^1.11.1""  # <--= optional, use most recent 1.x version

  # or using a specific version (no range)
  - uses: lukka/get-cmake@latest
    with:
      cmakeVersion: 3.25.2     # <--= optional, stick to exactly 3.25.2 version
      ninjaVersion: 1.11.1     # <--= optional, stick to exactly 1.11.1 version

  # Option 2: or you can use the Git \'tag\' to select the version, and you can have a one-liner statement,
  # but note that you can only use one of the existing tags, create a PR to add the tag you need!
  - name: Get specific version CMake, v3.26.0
    uses: lukka/get-cmake@v3.26.0     # <- this one-liner is all you need.
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
291,"jobs:
  build:
    steps:
      #-uses: actions/cache@v3   <===== YOU DO NOT NEED THIS!

      # Install latest CMake and Ninja.
      - uses: lukka/get-cmake@latest
      # Or pin to a specific CMake version:
      # lukka/get-cmake@v3.21.2

      # Restore from cache the previously built ports. If a ""cache miss"" occurs,
      # then vcpkg is bootstrapped. Since a the vcpkg.json is being used later on
      # to install the packages when `run-cmake` runs, no packages are installed at
      # this time.
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@v10 # Always specify the specific _version_ of the 
                                  # action you need, `v10` in this case to stay up
                                  # to date with fixes on the v10 branch.
        #with:
          # This is the default location of the directory containing vcpkg sources.
          # Change it to the right location if needed.
          # vcpkgDirectory: \'${{ github.workspace }}/vcpkg\'

          # If not using a submodule for vcpkg sources, this specifies which commit
          # id must be checkout from a Git repo. It must not set if using a submodule
          # for vcpkg.
          # vcpkgGitCommitId: \'${{ matrix.vcpkgCommitId }}\'

          # This is the glob expression used to locate the vpkg.json and add its
          # hash to the cache key. Change it to match a single manifest file you want
          # to use.
          # vcpkgJsonGlob: \'**/vcpkg.json\'

          # This is needed to run `vcpkg install` command (after vcpkg is built) in
          # the directory where vcpkg.json has been located. Default is false,
          # It is highly suggested to let `run-cmake` to run vcpkg (i.e. `false`)
          # (i.e. let CMake run `vcpkg install`) using the vcpkg.cmake toolchain.
          # runVcpkgInstall: true

      - name: Run CMake consuming CMakePresets.json and vcpkg.json by mean of vcpkg.
        uses: lukka/run-cmake@v10
        with:
          # This is the default path to the CMakeLists.txt along side the
          # CMakePresets.json. Change if you need have CMakeLists.txt and CMakePresets.json
          # located elsewhere.
          # cmakeListsTxtPath: \'${{ github.workspace }}/CMakeLists.txt\'

          # You could use CMake workflow presets defined in the CMakePresets.json 
          # with just this line below. Note this one cannot be used with any other 
          # preset input, it is mutually exclusive.
          # workflowPreset: \'workflow-name\'

          # This is the name of the CMakePresets.json\'s configuration to use to generate
          # the project files. This configuration leverages the vcpkg.cmake toolchain file to
          # run vcpkg and install all dependencies specified in vcpkg.json.
          configurePreset: \'ninja-multi-vcpkg\'
          # Additional arguments can be appended to the cmake command.
          # This is useful to reduce the number of CMake\'s Presets since you can reuse
          # an existing preset with different variables.
          configurePresetAdditionalArgs: ""[\'-DENABLE_YOUR_FEATURE=1\']""

          # This is the name of the CMakePresets.json\'s configuration to build the project.
          buildPreset: \'ninja-multi-vcpkg\'
          # Additional arguments can be appended when building, for example to specify the
          # configuration to build.
          # This is useful to reduce the number of CMake\'s Presets you need in CMakePresets.json.
          buildPresetAdditionalArgs: ""[\'--config Release\']""
    
          # This is the name of the CMakePresets.json\'s configuration to test the project with.
          testPreset: \'ninja-multi-vcpkg\'
          # Additional arguments can be appended when testing, for example to specify the config
          # to test.
          # This is useful to reduce the number of CMake\'s Presets you need in CMakePresets.json.
          testPresetAdditionalArgs: ""[\'--config Release\']""

    #env:
    #  VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }} # [OPTIONAL] Define the vcpkg\'s triplet 
    # you want to enforce, otherwise the default one for the hosting system will be 
    # automatically choosen (x64 is the default on all platforms,  e.g. x64-osx).

\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90      \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90
\xe2\x94\x82 <if workflowPreset        \xe2\x94\x82  Yes \xe2\x94\x82 Run the workflow       `*`\xe2\x94\x82  Inputs:
\xe2\x94\x82 provided>                 \xe2\x94\x9c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x96\xba\xe2\x94\x82 and then exit             \xe2\x94\x82   - `cmakeListsTxtPath`
\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98      \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98   - `workflowPreset`
              \xe2\x94\x82 No                               \xe2\xac\xac                 - `workflowPresetCmdString`
              \xe2\x96\xbc
\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90 
\xe2\x94\x82 <if configurePreset           `*`\xe2\x94\x82     Inputs:
\xe2\x94\x82 provided>                        |      - `cmakeListsTxtPath`
|                                  |      - `configurePreset`
\xe2\x94\x82 $CONFIGURE_PRESET_NAME =         \xe2\x94\x82      - `configurePresetCmdString`
\xe2\x94\x82 configurePreset\'s value          \xe2\x94\x82
| runs: `cmake --preset`           \xe2\x94\x82   
\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98 
              \xe2\x96\xbc
\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90
\xe2\x94\x82 <if buildPreset provided>      `*`\xe2\x94\x82     Inputs:
\xe2\x94\x82                                   \xe2\x94\x82     - `buildPreset`
\xe2\x94\x82 $BUILD_PRESET_NAME=buildPreset    \xe2\x94\x82     - `cmakeListsTxtPath`
\xe2\x94\x82 runs: `cmake --build --preset`    \xe2\x94\x82     - `buildPresetCmdString`
\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98     - `buildPresetAdditionalArgs`
              \xe2\x96\xbc
\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90
\xe2\x94\x82 <if testPreset provided>       `*`\xe2\x94\x82    Inputs:
\xe2\x94\x82                                   \xe2\x94\x82     - `testPreset`
\xe2\x94\x82 $TEST_PRESET_NAME=testPreset      \xe2\x94\x82     - `cmakeListsTxtPath`
\xe2\x94\x82 runs: `ctest --preset`            \xe2\x94\x82     - `testPresetCmdString`
\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98     - `testPresetAdditionalArgs`
              \xe2\x96\xbc
\xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90
\xe2\x94\x82 <if packagePreset provided>    `*`\xe2\x94\x82    Inputs:
\xe2\x94\x82                                   \xe2\x94\x82     - `packagePreset`
\xe2\x94\x82 $PACKAGE_PRESET_NAME=packagePreset\xe2\x94\x82     - `cmakeListsTxtPath`
\xe2\x94\x82 runs: `cpack --preset`            \xe2\x94\x82     - `packagePresetCmdString`
\xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\xac\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98     - `packagePresetAdditionalArgs`
              \xe2\x96\xbc
              \xe2\xac\xac END


  `*` On Windows runners, the MSVC environment is setup for each block
   with the `*` on the top right corner. Note that VCPKG_ROOT will not be 
   overridden by the value defined in the VS Developer Command Prompt 
   environment, but the original value will be kept.
 \xe2\x94\x8c\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x90
 \xe2\x94\x82 <if VCPKG_ROOT defined    \xe2\x94\x82  Inputs:
 \xe2\x94\x82 and CC and CXX undefined> \xe2\x94\x82   - `runVcpkgEnvFormatString`
 \xe2\x94\x82 run `vcpkg env` to set    \xe2\x94\x82   - `configurePresetAdditionalArgs`
 \xe2\x94\x82 the environment for MSVC  \xe2\x94\x82
 \xe2\x94\x94\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x80\xe2\x94\x98
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
292,"steps:
- uses: actions/checkout@v3
- uses: shogo82148/actions-setup-perl@v1
  with:
    perl-version: \'5.34\'
- run: cpanm --installdeps .
- run: prove -lv t

steps:
- uses: actions/checkout@v3
- uses: shogo82148/actions-setup-perl@v1
  with:
    perl-version: \'5.34\'
    install-modules-with: cpanm
    install-modules-args: --with-develop --with-configure
- run: prove -lv t

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [\'ubuntu-latest\', \'macos-latest\', \'windows-latest\']
        perl: [ \'5.34\', \'5.32\', \'5.30\' ]
    name: Perl ${{ matrix.perl }} on ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}
      - run: perl -V
      - run: cpanm --installdeps .
      - run: prove -lv t

steps:
- uses: actions/checkout@v3
- uses: shogo82148/actions-setup-perl@v1
  with:
    perl-version: \'5.32\'
    distribution: strawberry
- run: cpanm --installdeps .
- run: prove -lv t

use Actions::Core;

# Inputs/Outputs
my $input = get_input(\'inputName\', { required: true });
my $boolean_input = get_boolean_input(\'boolean-input\'); # accepts YAML 1.2 boolean values.
set_output(\'outputKey\', \'outputVal\');

# Exporting variables
export_variable(\'envVar\', \'Val\');

# Setting a secret
set_secret(\'myPassword\');

# PATH Manipulation
add_path(\'/path/to/mytool\');

# Exit codes
set_failed(`Action failed with error ${err}`);

# Logging
debug(\'debug message\');
if (is_debug()) {
  # print verbose log
}
info(\'Output to the actions build log\');

# Annotation
error(\'error\')
warning(\'warning\');
notice(\'notice\');
notice(\'add an annotation to files\', {
  title => \'Title\',
  file => \'filename.txt\',
  start_line   => 1,
  end_line     => 1,
  start_column => 1,
  end_column   => 10,
});

# Manually wrap output
start_group(\'Do some function\');
do_some_function();
end_group();

# Summary
use Actions::Core::Summary;
Actions::Core::Summary->new()
  ->add_raw(""some text"")
  ->add_code_block(""print \'Hello\';"", ""perl"")
  ->add_list([\'item1\', \'item2\', \'item3\'])
  ->add_table([[\'1\', \'2\', \'3\'], [\'one\', \'two\', \'three\']])
  ->add_separator()
  ->add_heading(\'heading\')
  ->add_details(\'label\', \'content\')
  ->add_image(\'https://github.com/actions.png\', \'alt\', { width => ""32"", height => ""32"" })
  ->add_quote(\'text\', \'cite\')
  ->add_link(""Example"", ""http://example.com"")
  ->write();

# Wrap Subroutines
my $result = group \'Do something async\' => sub {
  return \'some results\';
};

# Custom Functions of actions-setup-perl
# List Available Perl Versions
my @available_perls_on_current_platform = perl_versions(); # (\'5.34.0\', \'5.32.1\', \'5.30.3\', \'5.28.3\', ...)
my @available_perls_on_linux   = perl_versions(platform => \'linux\');
my @available_perls_on_darwin  = perl_versions(platform => \'darwin\');
my @available_perls_on_win32   = perl_versions(platform => \'win32\');
my @available_strawberry_perls = perl_versions(platform => \'win32\', distribution => \'strawberry\');
my @including_patch_versions   = perl_versions(patch => 1); # (\'5.34.0\', \'5.32.1\', \'5.32.0\', \'5.30.3\', \'5.30.2\', ...)

jobs:
  list:
    name: list available perl versions
    runs-on: ubuntu-latest
    steps:
      - uses: shogo82148/actions-setup-perl@v1
      - id: set-matrix
        name: list available perl versions
        shell: perl {0}
        run: |
          use Actions::Core;
          set_output(matrix => {perl => [perl_versions()]});
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  run:
    runs-on: ubuntu-latest
    needs: list
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.list.outputs.matrix)}}
    steps:
      - uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: ${{ matrix.perl }}
      # do something
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
293,"name: Java CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Build with Maven
      run: mvn -B verify spotbugs:spotbugs
    - uses: jwgmeligmeyling/spotbugs-github-action@master
      with:
        path: '**/spotbugsXml.xml'

<build>
  <plugins>
    <plugin>
      <groupId>com.github.spotbugs</groupId>
      <artifactId>spotbugs-maven-plugin</artifactId>
      <version>4.0.0</version>
      <configuration>
        <xmlOutput>true</xmlOutput>
        <failOnError>false</failOnError>
      </configuration>
    </plugin>
  </plugins>
</build>

- uses: actions/checkout@v2
  with:
    ref: ${{ github.event.pull_request.head.sha }}

$ npm install

$ npm run build && npm run package

$ npm test

 PASS  ./index.test.js
  \xe2\x9c\x93 throws invalid number (3ms)
  \xe2\x9c\x93 wait 500 ms (504ms)
  \xe2\x9c\x93 test runs (95ms)

...
","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
294,"steps:
- uses: actions/checkout@v2
- uses: actions/setup-java@v1
  with:
    java-version: \'8.0.252\' # The JDK version to make available on the path.
    java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
    architecture: x64 # (x64 or x86) - defaults to x64
- run: java -cp java HelloWorldApp

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        # test against latest update of each major Java version, as well as specific updates of LTS versions:
        java: [ 7, 7.0.262, 8, 8.0.252, 11.0.x, 11.0.7 ]
    name: Java ${{ matrix.java }} sample
    steps:
      - uses: actions/checkout@v2
      - name: Setup java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - run: java -cp java HelloWorldApp

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy
      env:
        GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password

    - name: Set up Apache Maven Central
      uses: actions/setup-java@v1
      with: # running setup-java again overwrites the settings.xml
        java-version: 1.8
        server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
        server-username: MAVEN_USERNAME # env variable for username in deploy
        server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

    - name: Publish to Apache Maven Central
      run: mvn deploy
      env:
        MAVEN_USERNAME: maven_username123
        MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

<settings xmlns=""http://maven.apache.org/SETTINGS/1.0.0""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"">
  <servers>
    <server>
      <id>github</id>
      <username>${env.GITHUB_ACTOR}</username>
      <password>${env.GITHUB_TOKEN}</password>
    </server>
    <server>
      <id>gpg.passphrase</id>
      <passphrase>${env.GPG_PASSPHRASE}</passphrase>
    </server>
  </servers>
</settings>

<settings xmlns=""http://maven.apache.org/SETTINGS/1.0.0""
  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
  xsi:schemaLocation=""http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd"">
  <servers>
    <server>
      <id>maven</id>
      <username>${env.MAVEN_USERNAME}</username>
      <password>${env.MAVEN_CENTRAL_TOKEN}</password>
    </server>
    <server>
      <id>gpg.passphrase</id>
      <passphrase>${env.MAVEN_GPG_PASSPHRASE}</passphrase>
    </server>
  </servers>
</settings>

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1

    - name: Build with Gradle
      run: gradle build

    - name: Publish to GitHub Packages
      run: gradle publish
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8 for Shared Runner
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
295,"on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - \'v*\' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
296,"name: ""emsdk""
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: mymindstorm/setup-emsdk@v11

      - name: Verify
        run: emcc -v

- name: Setup emsdk
  uses: mymindstorm/setup-emsdk@v11
  with:
    # Make sure to set a version number!
    version: 1.38.40
    # This is the name of the cache folder.
    # The cache folder will be placed in the build directory,
    #  so make sure it doesn\'t conflict with anything!
    actions-cache-folder: \'emsdk-cache\'

- name: Verify
  run: emcc -v

env:
  EM_VERSION: 1.39.18
  EM_CACHE_FOLDER: \'emsdk-cache\'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup cache
        id: cache-system-libraries
        uses: actions/cache@v2
        with:
          path: ${{env.EM_CACHE_FOLDER}}
          key: ${{env.EM_VERSION}}-${{ runner.os }}
      - uses: mymindstorm/setup-emsdk@v11
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
      - name: Build library
        run: make -j2
      - name: Run unit tests
        run: make check

version:
  description: \'Version to install\'
  default: \'latest\'
no-install:
  description: ""If true will not download any version of Emscripten. emsdk will still be added to PATH.""
  default: false
no-cache:
  description: ""If true will not cache any downloads with tc.cacheDir.""
  default: false
actions-cache-folder:
  description: ""Directory to cache emsdk in. This folder will go under $GITHUB_HOME (I.e. build dir) and be cached using @actions/cache.""
  default: \'\'
update:
  description: ""Fetch package information for all the new tools and SDK versions""
  default: false
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
297,"name: Blazing fast GitHub Pages deploy

on:
  push:
    branches:
    - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - name: npm install, test and build
        run: |
          npm install
          npm run test
          npm run build
      - name: Deploy site to gh-pages branch
        uses: alex-page/blazing-fast-gh-pages-deploy@v1.1.0
        with:
          repo-token: ${{ secrets.GH_PAT }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
298,"uses: kamiazya/setup-graphviz@v1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
299,"# Build repository using CMake
name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      uses: HorstBaerbel/action-cmake@1.1
      # These are optional (defaults displayed)
      with:
        sourcedir: \'.\'
        builddir: \'build\'
        cmakeoptions: \'\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
300,"# Run clang-format
name: Clang-format

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  checkout-and-check-formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run clang-format
      uses: HorstBaerbel/action-clang-format@1.5
      # These are optional (defaults displayed)
      with:
        scandir: \'.\'
        excludedirs: \'build\'
        extensions: \'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx\'
        style: \'file\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
301,"# Run clang-tidy
name: Clang-tidy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  checkout-and-check-formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run clang-tidy
      uses: HorstBaerbel/action-clang-tidy@1.2
      # These are optional (defaults displayed)
      with:
        scandir: \'.\'
        builddir: \'build\'
        excludedirs: \'\'
        extensions: \'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx\'
        cmakeoptions: \'\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
302,"# Run unit tests using CTest
name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  checkout-and-check-formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Run unit tests
      uses: HorstBaerbel/action-ctest@1.1
      # These are optional (defaults displayed)
      with:
        sourcedir: \'.\'
        builddir: \'build\'
        cmakeoptions: \'--config Release\'
        ctestoptions: \'\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
303,"name: Move new issues into Triage

on:
  issues:
    types: [opened]

jobs:
  automate-project-columns:
    runs-on: ubuntu-latest
    steps:
      - uses: alex-page/github-project-automation-plus@v0.8.3
        with:
          project: Backlog
          column: Triage
          repo-token: ${{ secrets.GITHUB_TOKEN }}

name: Move assigned pull requests into To do

on:
  pull_request:
    types: [assigned]

jobs:
  automate-project-columns:
    runs-on: ubuntu-latest
    steps:
      - uses: alex-page/github-project-automation-plus@v0.8.3
        with:
          project: Backlog
          column: To do
          repo-token: ${{ secrets.GITHUB_TOKEN }}

repo-token: ${{ secrets.GHPROJECT_TOKEN }}

GraphqlError: Resource protected by organization SAML enforcement. You must grant your personal token access to this organization
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
304,"on:
  pull_request:
    types: [opened]
name: Pull Request
jobs:
  assignAuthor:
    name: Assign author to PR
    runs-on: ubuntu-latest
    steps:
      - name: Assign author to PR
        uses: technote-space/assign-author@v1

on:
  issues:
    types: [opened]
name: Issues
jobs:
  assignAuthor:
    name: Assign author to issue
    runs-on: ubuntu-latest
    steps:
      - name: Assign author to issue
        uses: technote-space/assign-author@v1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
305,"steps:
  - name: Run composer
    uses: nick-zh/composer-php@master
    with:
      action: 'install -oa'
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
306,"- uses: montudor/action-zip@v1
  with:
    args: zip -qq -r dir.zip dir

- uses: montudor/action-zip@v1
  with:
    args: unzip -qq dir.zip -d dir

- name: Install zip
  uses: montudor/action-zip@v1

- name: Zip output
  run: zip -qq -r function.zip dist node_modules package.json
  working-directory: path/to/work-dir

name: Continuous Integration
on:
  push:
  pull_request:
jobs:
  composer-install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: composer install --ansi --no-progress --no-interaction --prefer-dist
      - uses: montudor/action-zip@v1
        with:
          args: zip -qq -r vendor.zip vendor
      - uses: actions/upload-artifact@v2
        with:
          name: vendor.zip
  tests:
    needs: composer-install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v2
        with:
          name: vendor.zip
      - uses: montudor/action-zip@v1
        with:
          args: unzip -qq vendor.zip -d vendor
      - run: ./vendor/bin/phpunit
  mutation:
    needs: composer-install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v2
        with:
          name: vendor.zip
      - uses: montudor/action-zip@v1
        with:
          args: unzip -qq vendor.zip -d vendor
      - run: ./vendor/bin/infection
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
307,"jobs:
  build:
    # ...
    steps:
      - uses: AButler/upload-release-assets@v2.0
        with:
          files: \'artifacts/*;packages/*.nupkg\'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
308,"name: 'Nightly Merge'

on:
  schedule:
    - cron:  '0 0 * * *'

jobs:
  nightly-merge:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Nightly Merge
      uses: robotology/gh-action-nightly-merge@v1.4.0
      with:
        stable_branch: 'master'
        development_branch: 'devel'
        allow_ff: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    branches:
      - master

on:
  workflow_dispatch:

      with:
        push_token: 'FOO_TOKEN'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FOO_TOKEN: ${{ secrets.FOO_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
309,"docker network create icinga

# CA
docker run --rm \\
\t-h icinga-master \\
\t-v icinga-master:/data \\
\t-e ICINGA_MASTER=1 \\
\ticinga/icinga2 \\
\tcat /var/lib/icinga2/certs/ca.crt > icinga-ca.crt

# Ticket
docker run --rm \\
\t-h icinga-master \\
\t-v icinga-master:/data \\
\t-e ICINGA_MASTER=1 \\
\ticinga/icinga2 \\
\ticinga2 daemon -C
docker run --rm \\
\t-h icinga-master \\
\t-v icinga-master:/data \\
\t-e ICINGA_MASTER=1 \\
\ticinga/icinga2 \\
\ticinga2 pki ticket --cn icinga-agent > icinga-agent.ticket

# Master
docker run --rm -d \\
\t--network icinga \\
\t--name icinga-master \\
\t-h icinga-master \\
\t-p 5665:5665 \\
\t-v icinga-master:/data \\
\t-e ICINGA_MASTER=1 \\
\ticinga/icinga2

# Agent
docker run --rm -d \\
\t--network icinga \\
\t-h icinga-agent \\
\t-v icinga-agent:/data \\
\t-e ICINGA_ZONE=icinga-agent \\
\t-e ICINGA_ENDPOINT=icinga-master,icinga-master,5665 \\
\t-e ICINGA_CACERT=""$(< icinga-ca.crt)"" \\
\t-e ICINGA_TICKET=""$(< icinga-agent.ticket)"" \\
\ticinga/icinga2

git clone https://github.com/Icinga/icinga2.git
#pushd icinga2
#git checkout v2.12.0
#popd

./build.bash ./icinga2
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
310,"docker run --rm -d \\
\t-p 8080:8080 \\
\t-v icingaweb:/data \\
\t-e icingaweb.enabledModules=icingadb \\
\t-e icingaweb.passwords.icingaweb2.icingaadmin=123456 \\
\t-e icingaweb.authentication.icingaweb2.backend=db \\
\t-e icingaweb.authentication.icingaweb2.resource=icingaweb_db \\
\t-e icingaweb.config.global.config_backend=db \\
\t-e icingaweb.config.global.config_resource=icingaweb_db \\
\t-e icingaweb.config.logging.log=php \\
\t-e icingaweb.groups.icingaweb2.backend=db \\
\t-e icingaweb.groups.icingaweb2.resource=icingaweb_db \\
\t-e icingaweb.modules.icingadb.config.icingadb.resource=icingadb \\
\t-e icingaweb.modules.icingadb.redis.redis1.host=2001:db8::192.0.2.18 \\
\t-e icingaweb.modules.icingadb.redis.redis1.port=6379 \\
\t-e icingaweb.modules.icingadb.commandtransports.icinga2.transport=api \\
\t-e icingaweb.modules.icingadb.commandtransports.icinga2.host=2001:db8::192.0.2.9 \\
\t-e icingaweb.modules.icingadb.commandtransports.icinga2.username=root \\
\t-e icingaweb.modules.icingadb.commandtransports.icinga2.password=123456 \\
\t-e icingaweb.resources.icingaweb_db.type=db \\
\t-e icingaweb.resources.icingaweb_db.db=mysql \\
\t-e icingaweb.resources.icingaweb_db.host=2001:db8::192.0.2.13 \\
\t-e icingaweb.resources.icingaweb_db.dbname=icingaweb \\
\t-e icingaweb.resources.icingaweb_db.username=icingaweb \\
\t-e icingaweb.resources.icingaweb_db.password=123456 \\
\t-e icingaweb.resources.icingaweb_db.charset=utf8mb4 \\
\t-e icingaweb.resources.icingadb.type=db \\
\t-e icingaweb.resources.icingadb.db=mysql \\
\t-e icingaweb.resources.icingadb.host=2001:db8::192.0.2.113 \\
\t-e icingaweb.resources.icingadb.dbname=icingadb \\
\t-e icingaweb.resources.icingadb.username=icingaweb \\
\t-e icingaweb.resources.icingadb.password=123456 \\
\t-e icingaweb.resources.icingadb.charset=utf8mb4 \\
\t-e icingaweb.roles.Administrators.users=icingaadmin \\
\t-e icingaweb.roles.Administrators.permissions=\'*\' \\
\t-e icingaweb.roles.Administrators.groups=Administrators \\
\ticinga/icingaweb2

[section]
option = value

git clone https://github.com/Icinga/icingaweb2.git
#pushd icingaweb2
#git checkout v2.9.0
#popd

./build.bash ./icingaweb2
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
311,"- name: Run CodeBuild
  uses: aws-actions/aws-codebuild-run-build@v1
  with:
    project-name: my-codebuild-job
    disable-source-override: true
    buildspec-override:   |
      version: 0.2
      phases:
        install:
          runtime-versions:
            nodejs: 16
          commands:
            - npm install -g typescript
            - npm install
        pre_build:
          commands:
            - echo Installing source NPM dependencies...
        build:
          commands:
            - echo Build started on `date`
            - tsc
            - npm prune --production
          post_build:
            commands:
              - echo Build completed on `date`  
      artifacts:
        type: zip
        files:
          - package.json
          - package-lock.json

{
  ""Version"": ""2012-10-17"",
  ""Statement"": [
    {
      ""Effect"": ""Allow"",
      ""Action"": [""codebuild:StartBuild"", ""codebuild:BatchGetBuilds""],
      ""Resource"": [""arn:aws:codebuild:REGION:ACCOUNT_ID:project/PROJECT_NAME""]
    },
    {
      ""Effect"": ""Allow"",
      ""Action"": [""logs:GetLogEvents""],
      ""Resource"": [
        ""arn:aws:logs:REGION:ACCOUNT_ID:log-group:/aws/codebuild/PROJECT_NAME:*""
      ]
    }
  ]
}

- name: Configure AWS Credentials
  uses: aws-actions/configure-aws-credentials@v1
  with:
    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    aws-region: us-east-2
- name: Run CodeBuild
  uses: aws-actions/aws-codebuild-run-build@v1
  with:
    project-name: CodeBuildProjectName

- name: Configure AWS Credentials
  uses: aws-actions/configure-aws-credentials@v1
  with:
    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    aws-region: us-east-2
- name: Run CodeBuild
  uses: aws-actions/aws-codebuild-run-build@v1
  with:
    project-name: CodeBuildProjectName
    buildspec-override: path/to/buildspec.yaml or inline buildspec definition
    compute-type-override: compute-type
    environment-type-override: environment-type
    image-override: ecr-image-uri
    env-vars-for-codebuild: |
      custom,
      requester,
      event-name
  env:
    custom: my environment variable
    requester: ${{ github.actor }}
    event-name: ${{ github.event_name }}

npx @aws-actions/codebuild-run-build -p ProjectName -r remoteName
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
312,"- name: Changed Files Exporter
  uses: futuratrepadeira/changed-files@v3.1.0
  with:
    repo-token: ${{ github.token }}
    pattern: \'^.*\\.(md|markdown)$\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
313,"name: Apply clang-format to PR

on:
  pull_request:
    types: [labeled]

jobs:
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: InsightSoftwareConsortium/ITKApplyClangFormatAction@testing
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - uses: InsightSoftwareConsortium/ITKApplyClangFormatAction@testing
      with:
        label-name: 'action:MakeItStylish'
        github-token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
314,"on: [push,pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1
    - uses: InsightSoftwareConsortium/ITKClangFormatLinterAction@master

    - uses: InsightSoftwareConsortium/ITKClangFormatLinterAction@master
      with:
        error-message: 'Code is inconsistent with ITK Coding Style. Add the *action:ApplyClangFormat* PR label to correct.'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
315,"steps:
  - uses: actions/checkout@v2 
  - uses: hadolint/hadolint-action@v1.5.0
    with:
      dockerfile: Dockerfile
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
316,"jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [21, 23, 29]
        target: [default, google_apis]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedCheck

jobs:
  test:
    runs-on: macos-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          ndk: 21.0.6113669
          cmake: 3.10.2.4988404
          script: ./gradlew connectedCheck

jobs:
  test:
    runs-on: macos-latest
    strategy:
      matrix:
        api-level: [21, 23, 29]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
        
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != \'true\'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo ""Generated AVD snapshot for caching.""

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck
","[0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
317,"+++ .github/workflows/ci.yml
  name: CI
  on:
    push:
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v1
+     - uses: olafurpg/setup-gpg@v3
      - run: sbt publishSigned
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
318,"uses: kevinpainchaud/simple-ftp-deploy-action@v1.2.1
with:
  ftp_host: ${{ secrets.FTP_HOST }}
  ftp_username: ${{ secrets.FTP_USERNAME }}
  ftp_password: ${{ secrets.FTP_PASSWORD }}
  local_source_dir: ""dist""
  dist_target_dir: ""www/my-app""
  delete: ""true""
  exclude: ""\'^logs/\' \'^README.md\'""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
319,"on: push
jobs:
  test:
    steps:
      - uses: technote-space/auto-cancel-redundant-workflow@v1
      - run: echo step1
      - run: echo step2
      # ...

on: push
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
#  cancel-in-progress: true
jobs:
  test:
    steps:
      - run: echo step1
      - run: echo step2
      # ...

on:
  repository_dispatch:
    types: [test]
  # push:
  # ...

name: Example
jobs:
  firstJob:
    name: First Job
    runs-on: ubuntu-latest
    steps:
        # Use this GitHub Actions at least once in this workflow as soon as possible.
      - uses: technote-space/auto-cancel-redundant-workflow@v1
        # Run any steps
      - name: any steps
        run: echo test
      # ...

  # Run any jobs
  secondJob:
    name: Second Job
    needs: firstJob
    runs-on: ubuntu-latest
    steps:
      - run: echo test

  # ...
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
320,"name: My Workflow
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ""hello""
          replace: ""world""
          regex: false

name: My Workflow
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ""hello""
          replace: ""world""
          include: ""justthisdirectory/**""
          regex: true

name: My Workflow
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ""hello""
          replace: ""world""
          include: ""**README.md"" # Will match all README.md files in any nested directory

name: My Workflow
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ""hello""
          replace: ""world""
          exclude: ""**/*.py"" # Do not modify Python files

name: My Workflow
on: [push, pull_request]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Find and Replace
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ""hello""
          replace: ""world""
          regex: false
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.MY_PAT }}
          branch: ${{ github.ref }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
321,"name: Deploy app
on: [push]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Deploy app
        uses: isthatcentered/dist-to-ftp@master
        with:
          user: ${{ secrets.FTP_USER }} # Ftp user Ex:
          password: ${{ secrets.FTP_PASSWORD }} # Ftp password Ex:
          host: ${{ secrets.FTP_HOST }} # Ftp host Ex:
          port: ${{ secrets.FTP_PORT }} # (optional) FTP port, defaults to 21
          path: dist # Folder to deploy Ex: apps/frontend/dist or dist
          into: web # Where to place the files in your ftp
          cleanupExisting: true # (Optional), Remove already existing files inside FTP destination folder (`into` parameter)

name: Deploy app
on:
  push:
    branches:
      - master
jobs:
  build:
    name: Build App
    runs-on: [ubuntu-latest]
    steps:
      - name: Import commit files
        uses: actions/checkout@master
      - name: Get yarn cache # https://github.com/actions/cache/blob/master/examples.md#node---yarn
        id: yarn-cache
        run: echo ""::set-output name=dir::$(yarn cache dir)""
      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles(\'**/yarn.lock\') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn install
      - name: Build
        run: yarn build
      - name: Upload bundle
        uses: actions/upload-artifact@master
        with:
          name: my_artifact_name # Upload artifact with name `dist`
          path: dist # Upload content of `dist` folder
      - name: Debug Files
        run: ls
  deploy:
    name: Deploy App
    runs-on: [ubuntu-latest]
    needs: [build]
    steps:
      - name: Download bundle
        uses: actions/download-artifact@master
        with:
          name: my_artifact_name # Download artifact named `my_artifact_name` (matches build step: Upload bundle)
          path: dist # Optional, downloads to current working directory under folder {artifact_name} if not specified
      - name: Debug Files
        run: ls
      - name: Upload to FTP
        uses: isthatcentered/dist-to-ftp@master
        with:
          user: ${{ secrets.FTP_USER }} # Ftp user Ex:
          password: ${{ secrets.FTP_PASSWORD }} # Ftp password Ex:
          host: ${{ secrets.FTP_HOST }} # Ftp host Ex:
          port: ${{ secrets.FTP_PORT }} # (optional) FTP port, defaults to 21
          path: dist # Folder to deploy Ex: apps/frontend/dist or dist
          into: web # Where to place the files in your ftp
          cleanupExisting: true # (Optional), Remove already existing files inside FTP destination folder (`into` parameter)

inputs:
  # Required:
  user:
    required: true
    description: Ftp user
  password:
    required: true
    description: Ftp password
  host:
    description: FTP host url
    required: true
  into:
    description: Where to place the files in your ftp
    required: true
  path:
    description: Path to your build folder (usually ""./public"" or ""./dist"")
    default: dist
    required: true

  # Optional
  port:
    description: FTP port
    required: false
    default: ""21""
  cleanupExisting:
    required: false
    default: true
    description: Remove existing file inside FTP destination folder
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
322,"name: publish to nuget\r
on:\r
  push:\r
    branches:\r
      - main # Default release branch, may also be named 'master' or 'develop'\r
jobs:\r
  publish:\r
    name: build, pack & publish\r
    runs-on: ubuntu-latest\r
    steps:\r
      - uses: actions/checkout@v2\r
\r
      # - name: Setup dotnet\r
      #   uses: actions/setup-dotnet@v1\r
      #   with:\r
      #     dotnet-version: 3.1.200\r
\r
      # Publish\r
      - name: publish on version change\r
        id: publish_nuget\r
        uses: brandedoutcast/publish-nuget@v2\r
        with:\r
          # Filepath of the project to be packaged, relative to root of repository\r
          PROJECT_FILE_PATH: Core/Core.csproj\r
\r
          # Configuration to build and package\r
          # BUILD_CONFIGURATION: Release\r
\r
          # Platform target to compile (default is empty/AnyCPU)\r
          # BUILD_PLATFORM: x64\r
\r
          # NuGet package id, used for version detection & defaults to project name\r
          # PACKAGE_NAME: Core\r
\r
          # Filepath with version info, relative to root of repository & defaults to PROJECT_FILE_PATH\r
          # VERSION_FILE_PATH: Directory.Build.props\r
\r
          # Regex pattern to extract version info in a capturing group\r
          # VERSION_REGEX: ^\\s*<Version>(.*)<\\/Version>\\s*$\r
\r
          # Useful with external providers like Nerdbank.GitVersioning, ignores VERSION_FILE_PATH & VERSION_REGEX\r
          # VERSION_STATIC: 1.0.0\r
\r
          # Flag to toggle git tagging, enabled by default\r
          # TAG_COMMIT: true\r
\r
          # Format of the git tag, [*] gets replaced with actual version\r
          # TAG_FORMAT: v*\r
\r
          # API key to authenticate with NuGet server\r
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}}\r
\r
          # NuGet server uri hosting the packages, defaults to https://api.nuget.org\r
          # NUGET_SOURCE: https://api.nuget.org\r
\r
          # Flag to toggle pushing symbols along with nuget package to the server, disabled by default\r
          # INCLUDE_SYMBOLS: false\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
323,"uses: snickerbockers/submodules-init@v4
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
324,"steps:
- uses: actions/checkout@v1
- uses: AdoptOpenJDK/install-jdk@v1
  with:
    version: \'13\'
    architecture: x64

- uses: AdoptOpenJDK/install-jdk@v1
  with:
    version: \'8\'
    architecture: x64
- uses: AdoptOpenJDK/install-jdk@v1
  with:
    version: \'13\'
    architecture: x64
    targets: \'JDK_13\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
325,"name: CI

on: [push]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: php-actions/composer@v6 # or alternative dependency management
    - uses: php-actions/phpunit@v3
    # ... then your own project steps ...

...

jobs:
  unit-tests:

    ...

    - name: PHPUnit tests
      uses: php-actions/phpunit@v3
      with:
        configuration: ""custom/path/to/phpunit.xml""
        memory_limit: ""256M""

jobs:
  unit-tests:

    ...

    - name: PHPUnit tests
      uses: php-actions/phpunit@v3
      with:
        php_extensions: ""xdebug""
        coverage_clover: ""coverage/clover.xml""
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
326,"\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97   \xe2\x96\x88\xe2\x96\x88\xe2\x95\x97
\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91
\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91     \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91
\xe2\x95\x9a\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91     \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x95\x9a\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91
\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x95\x9a\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \xe2\x95\x9a\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91
\xe2\x95\x9a\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d  \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d  \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d

- name: Perform Scan
  uses: ShiftLeftSecurity/scan-action@master

- name: Perform Scan
  uses: ShiftLeftSecurity/scan-action@master
  with:
    type: ""credscan,java,depscan""

- name: Perform Scan
  uses: ShiftLeftSecurity/scan-action@master
  with:
    type: ""credscan,python""
  env:
    WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- uses: actions/upload-artifact@v1
  with:
    name: reports
    path: reports

- name: Perform Scan
  uses: ShiftLeftSecurity/scan-action@master
  with:
    type: ""credscan,python""
  env:
    WORKSPACE: https://github.com/${{ github.repository }}/blob/${{ github.sha }}
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    SCAN_AUTO_BUILD: true
","[0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
327,"name: Release Management

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - master

jobs:
  update_draft_release:
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into ""master""
      - uses: toolmantim/release-drafter@v5.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

template: |
  ## What\xe2\x80\x99s Changed

  $CHANGES

name-template: \'v$NEXT_PATCH_VERSION \xf0\x9f\x8c\x88\'
tag-template: \'v$NEXT_PATCH_VERSION\'
categories:
  - title: \'\xf0\x9f\x9a\x80 Features\'
    labels:
      - \'feature\'
      - \'enhancement\'
  - title: \'\xf0\x9f\x90\x9b Bug Fixes\'
    labels:
      - \'fix\'
      - \'bugfix\'
      - \'bug\'
  - title: \'\xf0\x9f\xa7\xb0 Maintenance\'
    label: \'chore\'
change-template: \'- $TITLE @$AUTHOR (#$NUMBER)\'
template: |
  ## Changes

  $CHANGES

categories:
  - title: \'\xf0\x9f\x9a\x80 Features\'
    label: \'feature\'
  - title: \'\xf0\x9f\x90\x9b Bug Fixes\'
    labels:
      - \'fix\'
      - \'bugfix\'
      - \'bug\'

exclude-labels:
  - \'skip-changelog\'

replacers:
  - search: \'/CVE-(\\d{4})-(\\d+)/g\'
    replace: \'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-$1-$2\'
  - search: \'myname\'
    replace: \'My Name\'

# Install dependencies
yarn

# Run the tests
npm test

# Run the app locally
npm run dev

# Run the tests
docker-compose run --rm app npm test

git checkout master && git pull && npm version [major | minor | patch]
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
328,"{
    ""sdk"": {
      ""version"": ""5.0.100-preview.7.20366.6"",
      ""rollForward"": ""latestFeature""
    },
    ""others"": [""3.1.201"", ""2.2.105""]
}

jobs:
  build:
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Get SDKs to install
      shell: pwsh
      # Collect the SDKs we need by parsing global.json
      # Supplementary sdks are stored in an ""others"" array.
      run: |
        $json = ConvertFrom-Json (Get-Content global.json -Raw)
        $sdks = ($json.others + $json.sdk.version) -join "",""
        Write-Output ""::set-env name=REQUIRED_SDKS::$sdks""

    - name: Install .NET SDKs
      uses: JeremySkinner/global-json-dotnet-install@master
      with:
        versions: ${{ env.REQUIRED_SDKS }}

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
329,"name: End-to-end tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests
      - name: Cypress run
        uses: cypress-io/github-action@v5

name: End-to-end tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          component: true

- name: Cypress run
  uses: cypress-io/github-action@v5

- name: Cypress run
  uses: cypress-io/github-action@v5.1.0

name: Chrome
on: push
jobs:
  chrome:
    runs-on: ubuntu-22.04
    name: E2E on Chrome
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: chrome

name: Firefox
on: push
jobs:
  firefox:
    runs-on: ubuntu-22.04
    name: E2E on Firefox
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: firefox

name: Edge
on: push
jobs:
  edge:
    runs-on: ubuntu-22.04
    name: E2E on Edge
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: edge

name: Chrome headed
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: chrome
          headed: true

name: E2E in custom container
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    # Cypress Docker image with Chrome v106
    # and Firefox v106 pre-installed
    container: cypress/browsers:node18.12.0-chrome106-ff106
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          browser: chrome

name: Cypress tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run with env
        uses: cypress-io/github-action@v5
        with:
          env: host=api.dev.local,port=4222

name: Cypress tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run with env
        uses: cypress-io/github-action@v5
        env:
          CYPRESS_host: api.dev.local
          CYPRESS_port: 4222

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          spec: cypress/e2e/spec1.cy.js

spec: |
  cypress/e2e/spec-a.cy.js
  cypress/**/*-b.cy.js

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          project: ./some/nested/folder

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
        env:
          # pass the Cypress Cloud record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
        env:
          # pass the Cypress Cloud record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # pass GitHub token to allow accurately detecting a build vs a re-run build
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # pass the project ID from the secrets through environment variable
          CYPRESS_PROJECT_ID: ${{ secrets.PROJECT_ID }}

name: tags
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    # let\'s make sure our ""app"" works on several versions of Node
    strategy:
      matrix:
        node: [16, 18, 20]
    name: E2E on Node v${{ matrix.node }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: node -v

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          tag: node-${{ matrix.node }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Cypress E2E Tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    name: E2E
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3

      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          # Cancel the run after 2 failed tests
          auto-cancel-after-failures: 2
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Artifacts
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    name: Artifacts
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
      # after the test run completes store videos and any screenshots
      - uses: actions/upload-artifact@v3
        # add the line below to store screenshots only on failures
        # if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
          if-no-files-found: ignore # \'warn\' or \'error\' are also available, defaults to `warn`
      - uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: cypress/videos
          if-no-files-found: ignore # \'warn\' or \'error\' are also available, defaults to `warn`

name: example-quiet
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Install npm dependencies, cache them correctly
      # and run all Cypress tests with `quiet` parameter
      - name: Cypress run
        uses: ./
        with:
          working-directory: examples/quiet
          quiet: true

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          config: pageLoadTimeout=100000,baseUrl=http://localhost:3000

name: Cypress tests
on: push
jobs:
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          config-file: tests/cypress-config.json

name: Parallel Cypress Tests
on: push
jobs:
  test:
    name: Cypress run
    runs-on: ubuntu-22.04
    strategy:
      # when one test fails, DO NOT cancel the other
      # containers, because this will kill Cypress processes
      # leaving Cypress Cloud hanging ...
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # because of ""record"" and ""parallel"" parameters
      # these containers will load balance all found tests among themselves
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          parallel: true
          group: \'Actions example\'
        env:
          # pass the Cypress Cloud record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- name: Run E2E tests
  uses: cypress-io/github-action@v5

- name: Run Component Testing
  uses: cypress-io/github-action@v5
  with:
    # we have already installed everything
    install: false
    component: true

name: Build
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          build: npm run build

name: With server
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start

name: With server
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          # Linux and MacOS
          start: npm start
          # Takes precedences on Windows
          start-windows: npm run start:windows:server

name: With servers
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm run api, npm run web

with:
  start: |
    npm run api
    npm run web

name: After server responds
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          # quote the url to be safe against YML parsing surprises
          wait-on: \'http://localhost:8080\'

- uses: cypress-io/github-action@v5
  with:
    start: npm start
    wait-on: \'http://localhost:8080/status\'
    # wait for 2 minutes for the server to respond
    wait-on-timeout: 120

- uses: cypress-io/github-action@v5
  with:
    # API runs on port 3050
    # Web server runs on port 8080
    start: npm run api, npm run web
    # wait for all services to respond
    wait-on: \'http://localhost:3050, http://localhost:8080\'

- uses: cypress-io/github-action@v5
  with:
    start: npm start
    wait-on: \'npx wait-on --timeout 60000 http://localhost:3000\'

- uses: cypress-io/github-action@v5
  with:
    install-command: yarn --frozen-lockfile --silent

name: Visual
on: push
jobs:
  e2e:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          start: npm start
          # quote the url to be safe against YML parsing surprises
          wait-on: \'http://localhost:8080\'
          # the entire command will automatically be prefixed with ""npm""
          # and we need the second ""npm"" to execute ""cypress run ..."" command line
          command-prefix: \'percy exec -- npx\'

steps:
  - name: Checkout \xf0\x9f\x9b\x8e
    uses: actions/checkout@v3

  - name: Custom tests \xf0\x9f\xa7\xaa
    uses: cypress-io/github-action@v5
    with:
      command: npm run e2e:ci

name: Parallel
on: push
jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        # run 3 copies of the current job in parallel
        containers: [1, 2, 3]
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          record: true
          parallel: true
          group: \'Actions example\'
          ci-build-id: \'${{ github.sha }}-${{ github.workflow }}-${{ github.event_name }}\'
        env:
          # pass the Cypress Cloud record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # single job that generates and outputs a common id
  prepare:
    outputs:
      uuid: ${{ steps.uuid.outputs.value }}
    steps:
      - name: Generate unique ID \xf0\x9f\x92\x8e
        id: uuid
        # take the current commit + timestamp together
        # the typical value would be something like
        # ""sha-5d3fe...35d3-time-1620841214""
        run: echo ""value=sha-$GITHUB_SHA-time-$(date +""%s"")"" >> $GITHUB_OUTPUT
  smoke-tests:
    needs: [\'prepare\']
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          record: true
          parallel: true
          ci-build-id: ${{ needs.prepare.outputs.uuid }}
        env:
          # pass the Cypress Cloud record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.EXAMPLE_RECORDING_KEY }}

repo/
  app/
  app-test/
    cypress/
      fixtures/
      integration/
      plugins/
      support/
    cypress.json
  package.json

repo/
  app/
  app-test/
    cypress/
      e2e/
      fixtures/
      support/
    cypress.config.js
  package.json

repo/
  app/
  app-test/
    cypress/
      component/
      fixtures/
      support/
    cypress.config.js
  package.json

on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          start: npm start
          working-directory: app-test

root/
  e2e/
    (code for installing and running Cypress tests)
    package.json
    package-lock.json
    cypress.json
    cypress

  (code for running the ""app"" with ""npm start"")
  package.json
  yarn.lock

name: E2E
on: push
jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master
      - name: Install root dependencies
        uses: bahmutov/npm-install@v1

      - name: Start server in the background
        run: npm start &

      # Cypress has its own package.json in folder ""e2e""
      - name: Install Cypress and run tests
        uses: cypress-io/github-action@v5
        with:
          working-directory: e2e

name: example-basic-pnpm
on: push
jobs:
  basic-pnpm:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: examples/basic-pnpm

name: example-yarn-classic
on: push
jobs:
  yarn-classic:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: examples/yarn-classic

name: example-yarn-modern
on: push
jobs:
  yarn-modern:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: examples/yarn-modern
          install-command: yarn install

name: example-yarn-modern-pnp
on: push
jobs:
  yarn-classic:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: examples/yarn-modern-pnp
          install-command: yarn install
          command: yarn run --binaries-only cypress run

name: example-start-and-yarn-workspaces
on: push
jobs:
  single:
    # the example has Yarn workspace in its ""root"" folder
    # examples/start-and-yarn-workspaces
    # and tests in a subfolder like ""workspace-1""
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        with:
          working-directory: examples/start-and-yarn-workspaces/workspace-1
          build: yarn run build
          start: yarn start
          wait-on: \'http://localhost:5000\'

name: End-to-end tests
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    # let\'s make sure our ""app"" works on several versions of Node
    strategy:
      matrix:
        node: [16, 18, 20]
    name: E2E on Node v${{ matrix.node }}
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - name: Checkout
        uses: actions/checkout@v3
      # run Cypress tests and record them under the same run
      # associated with commit SHA and just give a different group name
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          record: true
          group: Tests on Node v${{ matrix.node }}
          cache-key: node-v${{ matrix.node }}-on-${{ runner.os }}-hash-${{ hashFiles(\'yarn.lock\') }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Node versions
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node: [16, 18, 20]
    name: E2E on Node v${{ matrix.node }}
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5

name: E2E
on: push
jobs:
  test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@master
      - name: Install dependencies
        uses: cypress-io/github-action@v5
        with:
          # just perform install
          runTests: false
      - run: yarn lint
      - name: Run e2e tests
        uses: cypress-io/github-action@v5
        with:
          # we have already installed all dependencies above
          install: false
          # Cypress tests and config file are in ""e2e"" folder
          working-directory: e2e

- uses: actions/checkout@v3
- uses: actions/cache@v2
  with:
    path: |
      ~/.cache/Cypress
      node_modules
    key: my-cache-${{ runner.os }}-${{ hashFiles(\'package-lock.json\') }}
- run: npm i cypress
- uses: cypress-io/github-action@v5
  with:
    install: false

jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    # stop the job if it runs over 10 minutes
    # to prevent a hanging process from using all your CI minutes
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3
      - uses: cypress-io/github-action@v5
        # you can specify individual step timeout too
        timeout-minutes: 5

DEBUG: @cypress/github-action

- name: Cypress tests with debug logs
  uses: cypress-io/github-action@v5
  env:
    DEBUG: \'@cypress/github-action\'

- name: Cypress tests with debug logs
  uses: cypress-io/github-action@v5
  env:
    DEBUG: \'cypress:*\'

$ node src/ping-cli.js <url>

$ node src/ping-cli.js https://example.cypress.io
pinging url https://example.cypress.io for 30 seconds
::debug::pinging https://example.cypress.io has finished ok

- name: Cypress tests
  uses: cypress-io/github-action@v5
  # let\'s give this action an ID so we can refer
  # to its output values later
  id: cypress
  # Continue the build in case of an error, as we need to set the
  # commit status in the next step, both in case of success or failure
  continue-on-error: true
  with:
    record: true
  env:
    CYPRESS_RECORD_KEY: ${{ secrets.RECORDING_KEY }}
- name: Print Cypress Cloud URL
  run: |
    echo Cypress finished with: ${{ steps.cypress.outcome }}
    echo See results at ${{ steps.cypress.outputs.resultsUrl }}

name: info
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          build: npx cypress info

name: info
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress install
        uses: cypress-io/github-action@v5
        with:
          # just perform install
          runTests: false
      - name: Cypress info
        run: npx cypress info
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          # we have already installed all dependencies above
          install: false
          # rest of your parameters

name: example-cron
on:
  schedule:
    # runs tests every day at 4am
    - cron: \'0 4 * * *\'
jobs:
  nightly:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress nightly tests \xf0\x9f\x8c\x83
        uses: cypress-io/github-action@v5

name: Example no summary
on: push
jobs:
  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          publish-summary: false
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
330,"uses: frabert/replace-string-action@v2\r
with:\r
  pattern: 'Hello, (\\w+)!'\r
  string: 'Hello, world!'\r
  replace-with: 'I greet you, $1!'\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
331,"name: ""PR Greeter""
on: [pull_request]

jobs:
  pr-greeter:
    runs-on: ubuntu-latest
    steps:
      - name: ""Greeter""
        uses: JJ/pr-greeting-action@releases/v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          greeting: ""Hey **#** welcome to this repo""
","[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
332,"- name: bug
  description: Something isn't working
  color: d73a4a
- name: documentation
  description: Improvements or additions to documentation
  color: 0075ca
- name: duplicate
  description: This issue or pull request already exists
  color: cfd3d7

name: Sync labels
on:
  push:
    branches:
      - master
    paths:
      - path/to/manifest/labels.yml
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: micnncim/action-label-syncer@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          manifest: path/to/manifest/labels.yml

name: Sync labels
on:
  push:
    branches:
      - master
    paths:
      - path/to/manifest/labels.yml
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: micnncim/action-label-syncer@v1
        with:
          manifest: path/to/manifest/labels.yml
          repository: |
              owner/repository-1
              owner/repository-2
          token: ${{ secrets.PERSONAL_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
333,"jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: ""Windows MSVC"", os: windows-latest, cc: ""cl"", cxx: ""cl"" }
          - { name: ""Ubuntu gcc"", os: ubuntu-latest, cc: ""gcc"", cxx: ""g++"" }
          - { name: ""MacOS clang"", os: macos-latest, cc: ""clang"", cxx: ""clang++"" }
        
    steps:
      - name: Setup Ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          # ninja version to download. Default: 1.10.0
          version: 1.10.0

      - name: Build with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ runner.workspace }}/build
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          configure-options: -G Ninja
          build-type: Release
        
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
334,"name: Lint

on:
  push:
    branches:
      - develop
  pull_request:
    types:
      - assigned
      - opened
      - synchronize
      - reopened

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Validate QML and JavaScript files
        uses: liri-infra/qmllint-action@master
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

GITHUB_TOKEN=token
GITHUB_WORKSPACE=/path/to/project
GITHUB_REPOSITORY=owner/repo
GITHUB_SHA=abcdef...
./entrypoint
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
335,"name: Update Changelog file

on: [workflow_dispatch]

jobs:
  update-changelog-pull-request:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # Make changes in the source code using `update-changlog`.
      - uses: jackstr/update-changelog@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Send changes as pull request using `create-pull-request`.
      - uses: jackstr/create-pull-request@master
        with:
          branch: update-changelog
          branch-suffix: timestamp
          title: Update CHANGELOG.md
          body: |
            Updates CHANGELOG with latest versions.

            This is automatically generated pull request.

# Get token at https://github.com/settings/tokens/new
curl \\
    -u $user:$token \\
    -X POST \\
    -H ""Accept: application/vnd.github.v3+json"" \\
    https://api.github.com/repos/jackstr/seamly2d/actions/workflows/update-changelog.yml/dispatches \\
    -d \'{""ref"": ""develop""}\' # branch name
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
336,"      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
      - name: Check outputs
        run: |
          echo ""Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}""

      - uses: actions/checkout@v1
      - run: git checkout ""${GITHUB_REF:11}""

    steps:
      - uses: actions/checkout@v2
      - name: Create commits
        run: |
          git config user.name \'Peter Evans\'
          git config user.email \'peter-evans@users.noreply.github.com\'
          date +%s > report.txt
          git commit -am ""Modify tracked file during workflow""
          date +%s > new-report.txt
          git add -A
          git commit -m ""Add untracked file during workflow""
      - name: Uncommitted change
        run: date +%s > report.txt
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3

      - name: Create or Update Project Card
        uses: peter-evans/create-or-update-project-card@v1
        with:
          project-name: My project
          column-name: My column
          issue-number: ${{ steps.cpr.outputs.pull-request-number }}

name: Create Pull Request
on: push
jobs:
  createPullRequest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Make changes to pull request
        run: date +%s > report.txt

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.PAT }}
          commit-message: Update report
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: example-patches
          title: \'[Example] Update report\'
          body: |
            Update report
            - Updated with *today\'s* date
            - Auto-generated by [create-pull-request][1]

            [1]: https://github.com/peter-evans/create-pull-request
          labels: |
            report
            automated pr
          assignees: peter-evans
          reviewers: peter-evans
          team-reviewers: |
            owners
            maintainers
          milestone: 1
          draft: false

      - name: Check output
        run: |
          echo ""Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
337,"#ifndef SOME_NAME
#define SOME_NAME

name: check-include-guards

on: [push, pull_request]

jobs:
  include-guards:
    name: Check include guards
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check include guards
      uses: sbeyer/include-guards-check-action@v1.0.0
      with:
        path: 'include/'
        pattern: 'PROJECT_{last_dir}_{file_base}'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
338,"steps:
- uses: harmon758/postgresql-action@v1
  with:
    postgresql version: '11'  # See https://hub.docker.com/_/postgres for available versions
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
339,"{
  ""statusCode"": 200,
  ""statusMessage"": ""OK"",
  ""ok"": true,
  ""result"": ""<deprecated - same as response but as string>"",
  ""response"": {
    ""ok"": true,
    ""channel"": ""XXXX"",
    ""ts"": ""1612623790.009600"",
    ""message"": {
      ""type"": ""message"",
      ""subtype"": ""bot_message"",
      ""text"": ""Lipsum"",
      ""ts"": ""1612623790.009600"",
      ""username"": ""Lipsum"",
      ""bot_id"": ""XXXX""
    }
  }
}

      - name: Send Slack Message Result
        run: echo ""${{ steps.send-message.outputs.slack-result }}""

name: slack-notification

on: [push, pull_request, issues]

jobs:
  slack-notifications:
    runs-on: ubuntu-20.04
    name: Sends a message to Slack when a push, a pull request or an issue is made
    steps:
      - name: Send message to Slack API
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: CPPUV5KU0
          slack-text: Hello! Event ""${{ github.event_name }}"" in ""${{ github.repository }}"" \xf0\x9f\xa4\x93
      - name: Result from ""Send Message""
        run: echo ""The result was ${{ steps.notify.outputs.slack-result }}""

name: slack-notification-with-optional-parameters

on: [push, pull_request, issues]

jobs:
  slack-notification-with-optional-parameters:
    runs-on: ubuntu-20.04
    name: Sends a message to Slack when a push, a pull request or an issue is made
    steps:
      - name: Send message to Slack API
        uses: archive/github-actions-slack@v2.0.0
        id: notify
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: CPPUV5KU0 #USE CHANNEL ID, NOT CHANNEL NAME, SINCE ID IS USED IN NEW SLACK API\'s
          slack-text: Hello! Something is burning! Or not...
          slack-optional-icon_emoji: "":fire:""
      - name: Result from ""Send Message""
        run: echo ""The result was ${{ steps.notify.outputs.slack-result }}""

name: slack-thread

on: [push, issues]

jobs:
  slack-thread:
    runs-on: ubuntu-20.04
    name: Sends a message to Slack when a push, a pull request or an issue is made

    steps:
      - name: Send Slack Message
        uses: archive/github-actions-slack@master
        id: send-message

        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: CPPUV5KU0
          slack-text: This is a message

      - name: Send ""Slack Message"" Result
        run: echo ""Data - ${{ steps.send-message.outputs.slack-result }}""

      - name: Some step in between
        run: echo ""...""

      - name: Send Thread Message
        uses: archive/github-actions-slack@master
        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ fromJson(steps.send-message.outputs.slack-result).response.channel }}
          slack-text: This is a thread reply
          slack-optional-thread_ts: ${{ fromJson(steps.send-message.outputs.slack-result).response.message.ts }}
          #slack-optional-reply_broadcast: true # To broadcast thread reply in channel

      - name: Send ""Send Thread Message"" Result
        run: echo ""Data - ${{ steps.send-message.outputs.slack-result }}""


name: slack-reaction

on: [push, issues]

jobs:
  slack-reaction:
    runs-on: ubuntu-20.04
    name: Sends a message to Slack when a push, a pull request or an issue is made

    steps:
      - name: Send Slack Message
        uses: archive/github-actions-slack@v2.0.0
        id: send-message

        with:
          slack-function: send-message
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: CPPUV5KU0
          slack-text: Time to react...

      - name: Send Slack Message Result
        run: echo ""Data - ${{ steps.send-message.outputs.slack-result }}""

      - name: Some step in between
        run: echo ""...""

      - name: Send Slack Reaction To Message
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-function: send-reaction
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_BOT_USER_OAUTH_ACCESS_TOKEN }}
          slack-channel: ${{ fromJson(steps.send-message.outputs.slack-result).response.channel }}
          slack-emoji-name: thumbsup
          slack-message-timestamp: ${{ fromJson(steps.send-message.outputs.slack-result).response.message.ts }}

      - name: Send Slack Reaction To Message Result
        run: echo ""Data - ${{ steps.send-message.outputs.slack-result }}""

on: push

jobs:
  one:
    runs-on: ubuntu-20.04
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo ""$GITHUB_CONTEXT""
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo ""$JOB_CONTEXT""
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo ""$STEPS_CONTEXT""
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo ""$RUNNER_CONTEXT""
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo ""$STRATEGY_CONTEXT""
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo ""$MATRIX_CONTEXT""

env BOT_USER_OAUTH_ACCESS_TOKEN=<YOUR TOKEN> CHANNEL=<YOUR CHANNEL> node integration-test/end-to-end.js
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
340,"name: ""Pull Request Docs Check""
on: 
- pull_request

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - uses: ammaraskar/sphinx-action@master
      with:
        docs-folder: ""docs/""

    - uses: actions/upload-artifact@v1
      with:
        name: DocumentationHTML
        path: docs/_build/html/

    - name: Commit documentation changes
      run: |
        git clone https://github.com/your_git/repository.git --branch gh-pages --single-branch gh-pages
        cp -r docs/_build/html/* gh-pages/
        cd gh-pages
        git config --local user.email ""action@github.com""
        git config --local user.name ""GitHub Action""
        git add .
        git commit -m ""Update documentation"" -a || true
        # The above command will fail if no changes were present, so we ignore
        # the return code.
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        branch: gh-pages
        directory: gh-pages
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - uses: ammaraskar/sphinx-action@master
      with:
        docs-folder: ""docs/""
        build-command: ""sphinx-build -b html . _build""

    - uses: ammaraskar/sphinx-action@master
      with:
        docs-folder: ""docs2/""
        pre-build-command: ""apt-get update -y && apt-get install -y latexmk texlive-latex-recommended texlive-latex-extra texlive-fonts-recommended""
        build-command: ""make latexpdf""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
341,"uses: apple-actions/import-codesign-certs@v2
with: 
  p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
  p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
","[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
342,"jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: jhenstridge/snapcraft-build-action@v1

...
    - uses: jhenstridge/snapcraft-build-action@v1
      with:
        path: path-to-snapcraft-project

...
    - uses: jhenstridge/snapcraft-build-action@v1
      id: snapcraft
    - uses: actions/upload-artifact@v1
      with:
        name: snap
        path: ${{ steps.snapcraft.outputs.snap }}

    - run: |
        sudo snap install --dangerous ${{ steps.snapcraft.outputs.snap }}
        # do something with the snap
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
343,"jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: snapcore/action-build@v1

...
    - uses: snapcore/action-build@v1
      id: snapcraft
    - uses: actions/upload-artifact@v3
      with:
        name: snap
        path: ${{ steps.snapcraft.outputs.snap }}

    - run: |
        sudo snap install --dangerous ${{ steps.snapcraft.outputs.snap }}
        # do something with the snap

...
    - uses: snapcore/action-build@v1
      with:
        path: path-to-snapcraft-project

...
    - uses: snapcore/action-build@v1
      with:
        ua-token: ${{ secrets.UA_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
344,"on: push
name: Check & Release
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: lint
        uses: Roang-zero1/factorio-mod-luacheck@master
        with:
          luacheckrc_url: https://raw.githubusercontent.com/Nexela/Factorio-luacheckrc/0.17/.luacheckrc
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
345,"name: Example cleaning up xvfb

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: sudo apt-get install xvfb
    - name: npm install, build, and test
      run: |
        npm i
        xvfb-run --auto-servernum npm test
      env:
        CI: true
    - name: Cleanup xvfb pidx
      uses: bcomnes/cleanup-xvfb@v1
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
346,"- uses: dotnet/nbgv@master
  id: nbgv
- run: echo \'SemVer2=${{ steps.nbgv.outputs.SemVer2 }}\'

- uses: dotnet/nbgv@master
  with:
    setAllVars: true
- run: echo ""NBGV_SemVer2 $NBGV_SemVer2""

- uses: dotnet/nbgv@master
  with:
    stamp: package.json

- uses: actions/checkout@v2
  with:
    fetch-depth: 0 # avoid shallow clone so nbgv can do its work.
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
347,"name: Jekyll Deploy

on: [push]

jobs: 
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build & Deploy to GitHub Pages
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
        uses: BryanSchuetz/jekyll-deploy-gh-pages@master
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
348,"- name: Build Jekyll site.
  uses: fabacab/jekyll-builder-for-github-pages-action@v1 # Or whatever ""@ref"" you want.

- uses: fabacab/jekyll-builder-for-github-pages-action@master
  with:
    jekyll_build_opts: --future

- uses: fabacab/jekyll-builder-for-github-pages-action@master
  with:
    # Use a newer `bundle` command.
    pre_build_commands: gem install bundler

- uses: fabacab/jekyll-builder-for-github-pages-action@master
  with:
    pre_build_commands: |
      echo ""Packaged bundler version: $(bundle --version)""
      echo ""Updating bundler...""
      gem install bundler

- uses: fabacab/jekyll-builder-for-github-pages-action@master
  with:
    secret_gh_pages_api_token: ${{ secrets.YOUR_SECRET_VARIABLE }}

# In your repository\'s `.github/workflows/publish-to-github-pages.yaml` file.
---
# Name of your GitHub Actions workflow.
name: Publish to GitHub Pages

# Specifies to run this workflow whenever a push is made (commits are
# added) to the branch named `jekyll`.
on:
  push:
    branches:
      # Change this to the branch where you keep your Jekyll code.
      - jekyll

# Define a job named `build-and-publish` in your workflow.
jobs:
  build-and-publish:
    runs-on: ubuntu-latest # This job uses a GitHub-hosted runner.

    steps:
      # Checkout the source from the `jekyll` branch.
      - uses: actions/checkout@v2

      # Invoke this action against the newly checked out source code.
      - uses: fabacab/jekyll-builder-for-github-pages-action@master
        with:
          # Provide this action with your repository\'s `GH_PAGES_TOKEN`
          # ""Secret"" variable. This should be the value of a personal
          # access token granted, at a minimum, the `public_repo` and
          # the `repo_deployment` scopes needed to deploy to GH Pages.
          secret_gh_pages_api_token: ${{ secrets.GH_PAGES_TOKEN }}

on:
  # Automatically execute this workflow on a schedule.
  schedule:
    # POSIX-compatible cron syntax is supported.
    - cron:  \'0 */12 * * *\' # Rebuild twice a day (every twelve hours on the hour).

  # Also run this workflow whenever pushes are made to these branches, as before.
  push:
    branches:
      # Change this to the branch where you keep your Jekyll code.
      - jekyll
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
349,"- uses: actions/delete-package-versions@v4
  with:
  # Can be a single package version id, or a comma separated list of package version ids.
  # Defaults to an empty string.
  package-version-ids:

  # Owner of the package.
  # Defaults to the owner of the repo executing the workflow.
  # Required if deleting a version from a package hosted in a different org than the one executing the workflow.
  owner:

  # Name of the package.
  # Required
  package-name:

  # Type of the package. Can be one of container, maven, npm, nuget, or rubygems.
  # Required
  package-type:

  # The number of old versions to delete starting from the oldest version.
  # Defaults to 1.
  num-old-versions-to-delete:

  # The number of latest versions to keep.
  # This cannot be specified with `num-old-versions-to-delete`. By default, `min-versions-to-keep` takes precedence over `num-old-versions-to-delete`.
  # When set to 0, all deletable versions will be deleted.
  # When set greater than 0, all deletable package versions except the specified number will be deleted.
  min-versions-to-keep:

  # The package versions to exclude from deletion.
  # Takes regex for the version name as input.
  # By default nothing is ignored. This is ignored when `delete-only-pre-release-versions` is true
  ignore-versions:

  # If true it will delete only the pre-release versions.
  # The number of pre-release versions to keep can be set by using `min-versions-to-keep` value with this.
  # When `min-versions-to-keep` is 0, all pre-release versions get deleted.
  # Defaults to false.
  # Cannot be used with `num-old-versions-to-delete` and `ignore-versions`.
  delete-only-pre-release-versions:

  # If true it will delete only the untagged versions in case of container package.
  # Does not work for other package types and will be ignored.
  # The number of untagged versions to keep can be set by using `min-versions-to-keep` value with this.
  # When `min-versions-to-keep` is 0, all untagged versions get deleted.
  # Defaults to false.
  # Cannot be used with `num-old-versions-to-delete`.
  delete-only-untagged-versions:

  # The token used to authenticate with GitHub Packages.
  # Defaults to github.token.
  # Required if the repo running the workflow does not have access to delete the package.
  #   For rubygems and maven package, repo has access if package is hosted in the same repo as the workflow.
  #   For container, npm and nuget package, repo has access if assigned **Admin** role under Package Settings > Manage Actions Access.
  #   If `package-version-ids` is given the token only needs the delete packages scope.
  #   If `package-version-ids` is not given the token needs the delete packages scope and the read packages scope
  token:

- uses: actions/delete-package-versions@v4
  with: 
    package-name: \'test-package\'
    package-type: \'npm\'
    min-versions-to-keep: 10
    delete-only-pre-release-versions: ""true""

- uses: actions/delete-package-versions@v4
  with: 
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.GITHUB_PAT }}
    min-versions-to-keep: 10
    delete-only-pre-release-versions: ""true""

- uses: actions/delete-package-versions@v4
  with: 
    package-name: \'test-package\'
    package-type: \'container\'
    min-versions-to-keep: 10
    delete-only-untagged-versions: \'true\'

- uses: actions/delete-package-versions@v4
  with: 
    package-name: \'test-package\'
    package-type: \'npm\'
    min-versions-to-keep: 3
    ignore-versions: \'^(0|[1-9]\\\\d*)\\\\.0\\\\.0$\'

- uses: actions/delete-package-versions@v4
  with: 
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.GITHUB_PAT }}
    min-versions-to-keep: 3
    ignore-versions: \'^(0|[1-9]\\\\d*)\\\\.0\\\\.0$\'

- uses: actions/delete-package-versions@v4
  with: 
    package-name: \'test-package\'
    package-type: \'npm\'
    num-old-versions-to-delete: 3
    ignore-versions: \'^(0|[1-9]\\\\d*)\\\\.0\\\\.0$\'

- uses: actions/delete-package-versions@v4
  with: 
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.PAT }}
    num-old-versions-to-delete: 3
    ignore-versions: \'^(0|[1-9]\\\\d*)\\\\.0\\\\.0$\'

- uses: actions/delete-package-versions@v4
  with:
    package-name: \'test-package\'
    package-type: \'npm\'
    min-versions-to-keep: 2

- uses: actions/delete-package-versions@v4
  with:
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.PAT }}
    min-versions-to-keep: 2

- uses: actions/delete-package-versions@v4
  with:
    package-name: \'test-package\'
    package-type: \'npm\'
    num-old-versions-to-delete: 3

- uses: actions/delete-package-versions@v4
  with:
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    num-old-versions-to-delete: 3
    token: ${{ secrets.GITHUB_PAT }}

- uses: actions/delete-package-versions@v4
  with:
    package-name: \'test-package\'
    package-type: \'npm\'

- uses: actions/delete-package-versions@v4
  with:
    owner: \'github\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.PAT }}

- uses: actions/delete-package-versions@v4
  with:
    package-version-ids: \'MDE0OlBhY2thZ2VWZXJzaW9uOTcyMDY3\'
    package-name: \'test-package\'
    package-type: \'npm\'

- uses: actions/delete-package-versions@v4
  with:
    package-version-ids: \'MDE0OlBhY2thZ2VWZXJzaW9uOTcyMDY3\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.PAT }}

- uses: actions/delete-package-versions@v4
  with:
    package-version-ids: \'MDE0OlBhY2thZ2VWZXJzaW9uOTcyMDY3, MDE0OlBhY2thZ2VWZXJzaW9uOTcyMzQ5, MDE0OlBhY2thZ2VWZXJzaW9uOTcyMzUw\'
    package-name: \'test-package\'
    package-type: \'npm\'

- uses: actions/delete-package-versions@v4
  with:
    package-version-ids: \'MDE0OlBhY2thZ2VWZXJzaW9uOTcyMDY3, MDE0OlBhY2thZ2VWZXJzaW9uOTcyMzQ5, MDE0OlBhY2thZ2VWZXJzaW9uOTcyMzUw\'
    package-name: \'test-package\'
    package-type: \'npm\'
    token: ${{ secrets.PAT }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
350,"runs-on: [ubuntu-18.04]
steps:
- uses: actions/checkout@v1
- uses: betwo/github-setup-catkin@v1.1.1
  with:
    ros-version: \'melodic\'
    workspace: \'$GITHUB_WORKSPACE\'
- run: catkin_make_isolated

runs-on: [ubuntu-18.04]
steps:
- uses: actions/checkout@v1
  with:
    path: wworkspace/src/my_package
- uses: betwo/github-setup-catkin@v1.1.1
  with:
    ros-version: \'melodic\'
    workspace: \'$GITHUB_WORKSPACE\'
- name: clone_dependencies
  run: |
    cd ..
    # clone more dependencies into the workspace, e.g.
    git clone https://github.com/betwo/csapex
    # ...
- uses: betwo/github-setup-catkin@v1.1.1
  with:
    ros-version: \'kinetic\'
    workspace: $HOME/work/my-repo-name/workspace
- name: build
  run: |
    cd $HOME/work/my-repo-name/workspace
    catkin_make_isolated

runs-on: [ubuntu-18.04]
strategy:
  matrix:
    compiler: [""/usr/bin/g++"", ""/usr/bin/clang++""]
steps:
- uses: actions/checkout@v1
- uses: betwo/github-setup-catkin@v1.1.1
  with:
    ros-version: \'melodic\'
    workspace: \'$GITHUB_WORKSPACE\'
- run: catkin_make_isolated -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.compiler }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
351,"on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Configure Environment
      env:
        ENVKEY: ${{ secrets.ENVKEY }}
      uses: rojopolis/envkey-action@master
    - name: Show environment
      run: env
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
352,"uses: hole19/git-tag-action@master
env:
  TAG: v1.2.3
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
353,"+++ .github/workflows/ci.yml
  name: CI
  on:
    push:
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v1
+     - uses: olafurpg/setup-scala@v11
      - name: Compile
        run: sbt compile

+++ .github/workflows/ci.yml
  name: CI
  on:
    push:
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v1
      - uses: olafurpg/setup-scala@v11
+       with:
+         java-version: adopt@1.11
      - name: Compile
        run: sbt compile

+++ .github/workflows/ci.yml
  name: CI
  on: [push]
  jobs:
    build:
      runs-on: ubuntu-latest
+     strategy:
+       fail-fast: false
      steps:
      - uses: actions/checkout@v1
      - uses: olafurpg/setup-scala@v11
      - name: Compile
        run: sbt compile

+++ .github/workflows/ci.yml
  name: CI
  on: [push]
  jobs:
    build:
-     runs-on: ubuntu-latest
+     runs-on: windows-latest
      steps:
+     - name: Configure git
+       run: ""git config --global core.autocrlf false""
+       shell: bash
      - uses: actions/checkout@v1
      - uses: olafurpg/setup-scala@v11
      - name: Compile
+       shell: bash
        run: sbt compile

+++ .github/workflows/ci.yml
  name: CI
  on: [push]
  jobs:
    build:
      runs-on: ubuntu-latest
      steps:
-     - uses: actions/checkout@v1
+     - uses: actions/checkout@v2
+       with:
+         fetch-depth: 100
+     - name: Fetch tags
+       run: git fetch --depth=100 origin +refs/tags/*:refs/tags/*
      - uses: olafurpg/setup-scala@v11
      - name: Compile
        run: sbt compile
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
354,"# Example
$ npm install eslint -D

name: reviewdog
on: [pull_request]
jobs:
  eslint:
    name: runner / eslint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review # Change reporter.
          eslint_flags: ""src/""

name: reviewdog
on: [pull_request]
jobs:
  eslint:
    name: runner / eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ""20""
      - run: yarn install
      - uses: reviewdog/action-eslint@v1
        with:
          reporter: github-check
          eslint_flags: ""src/""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
355,"name: reviewdog
on: [pull_request]
jobs:
  yamllint:
    name: runner / yamllint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: yamllint
        uses: reviewdog/action-yamllint@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review # Change reporter.
          yamllint_flags: 'src/'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
356,"steps:
- uses: actions/checkout@v2
- name: Run OSSAR
  uses: github/ossar-action@v1
  id: ossar
- name: Upload results to Security tab
  uses: github/codeql-action/upload-sarif@v1
  with:
    sarif_file: ${{ steps.ossar.outputs.sarifFile }}

- uses: actions/setup-dotnet@v1
  with:
    #     dotnet-version: '6.0.x'

- name: Upload results to Security tab
  uses: github/codeql-action/upload-sarif@v1
  with:
    sarif_file: ${{ steps.ossar.outputs.sarifFile }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
357,"- uses: azure/docker-login@v1\r
  with:\r
    login-server: '<login server>' # default: index.docker.io\r
    username: '<username>'\r
    password: '<password>'\r

- uses: azure/docker-login@v1\r
  with:\r
    login-server: contoso.azurecr.io\r
    username: ${{ secrets.ACR_USERNAME }}\r
    password: ${{ secrets.ACR_PASSWORD }}\r
- uses: azure/docker-login@v1\r
  with:\r
    login-server: index.docker.io\r
    username: ${{ secrets.DOCKERIO_USERNAME }}\r
    password: ${{ secrets.DOCKERIO_PASSWORD }}\r
- run: |\r
    docker pull contoso.azurecr.io/private/image:latest\r
    docker pull private/image:latest\r

- uses: azure/docker-login@v1\r
  with:\r
    login-server: contoso.azurecr.io\r
    username: ${{ secrets.REGISTRY_USERNAME }}\r
    password: ${{ secrets.REGISTRY_PASSWORD }}\r
\r
- run: |\r
    docker build . -t contoso.azurecr.io/k8sdemo:${{ github.sha }}\r
    docker push contoso.azurecr.io/k8sdemo:${{ github.sha }}\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
358,"steps:
- uses: niden/actions-memcached@v7
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
359,"name: Gatsby Publish

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: enriikke/gatsby-gh-pages-action@v2
        with:
          access-token: ${{ secrets.ACCESS_TOKEN }}

module.exports = {
  pathPrefix: ""/reponame"",
}

name: Gatsby Publish

on:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: enriikke/gatsby-gh-pages-action@v2
        with:
          access-token: ${{ secrets.ACCESS_TOKEN }}
          deploy-branch: gh-pages
          gatsby-args: --prefix-paths

name: Gatsby Publish

on:
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: enriikke/gatsby-gh-pages-action@v2
        with:
          access-token: ${{ secrets.ACCESS_TOKEN }}
          deploy-branch: gh-pages
          gatsby-args: --prefix-paths
          skip-publish: true

imenrique.com
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
360,"uses: jpetrucciani/mypy-check@master

# or specify a path!
uses: jpetrucciani/mypy-check@master
with:
  path: \'.\'


# or specify additional mypy flags!
uses: jpetrucciani/mypy-check@master
with:
  mypy_flags: \'--config-file .mypy.ini\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
361,"name: Example install of Ruby 2.6.5

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: clupprich/ruby-build-action@master
      id: ruby
      with:
        ruby-version: 2.6.5
    - name: Print version
      run: ${{ steps.ruby.outputs.ruby-path }} --version

name: Example install of Ruby 2.6.5 (cached)

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: actions/cache@preview
      id: cache
      with:
        path: ~/local/rubies
        key: ruby-2.6.5
    - uses: clupprich/ruby-build-action@master
      id: ruby
      with:
        ruby-version: 2.6.5
        cache-available: ${{ steps.cache.outputs.cache-hit == \'true\' }}
    - name: Print version
      run: ${{ steps.ruby.outputs.ruby-path }} --version
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
362,"- name: Build package
  uses: linz/linz-software-repository@vN
  with:
    release: jammy
    packages: \'cowsay python3\'
    packagecloud_repository: dev
    packagecloud_token: ${{ secrets.PACKAGECLOUD_TOKEN }}

- name: Authorize pushing to remote
  run:
    git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN
    }}@github.com/${GITHUB_REPOSITORY}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
363,"- uses: ibiqlik/action-yamllint@v3

---
name: Yaml Lint
on: [push]  # yamllint disable-line rule:truthy
jobs:
  lintAllTheThings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: myfolder/*values*.yaml
          config_file: .yamllint.yml

---
name: Yaml Lint
on: [push]  # yamllint disable-line rule:truthy
jobs:
  lintAllTheThings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v3

# Single line
config_data: ""{extends: default, rules: {new-line-at-end-of-file: disable}}""

# Multi line
config_data: |
  extends: default
  rules:
    new-line-at-end-of-file:
      level: warning
    trailing-spaces:
      level: warning

---
name: Yaml Lint
on: [push]  # yamllint disable-line rule:truthy
jobs:
  lintAllTheThings:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: yaml-lint
        uses: ibiqlik/action-yamllint@v3

      - run: echo ${{ steps.yaml-lint.outputs.logfile }}

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: yamllint-logfile
          path: ${{ steps.yaml-lint.outputs.logfile }}
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
364,"name: Nightly update
on:
  schedule:
    # https://crontab.guru/every-night-at-midnight
    - cron: ""0 0 * * *""

jobs:
  update_routes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - run: ""date > datetime.txt"" # create or update a test.txt file
      - uses: gr2m/create-or-update-pull-request-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

uses: gr2m/create-or-update-pull-request-action@v1
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
with:
  title: ""My pull request title""
  body: ""My pull request body""
  branch: ""my-pull-request-base-branch""
  path: ""lib/""
  commit-message: ""My commit message for uncommitted changes in lib/ folder""
  author: ""Lorem J. Ipsum <lorem@example.com>""
  labels: label1, label2
  assignees: user1, user2
  reviewers: user1, user2
  team_reviewers: team1, team2
  auto-merge: squash
  update-pull-request-title-and-body: false

- uses: gr2m/create-or-update-pull-request-action@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  with:
    title: ""My pull request title""
    body: ""My pull request body""
    branch: ""my-pull-request-base-branch""
    author: ""Lorem J. Ipsum <lorem@example.com>""
    path: ""cache/""
    commit-message: ""build: cache""
- uses: gr2m/create-or-update-pull-request-action@v1
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  with:
    branch: ""my-pull-request-base-branch""
    author: ""Lorem J. Ipsum <lorem@example.com>""
    path: ""data/""
    commit-message: ""feat: data updated""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
365,"uses: the-coding-owl/action-typo3-extension-repository-upload@0.0.1
  env: 
    SECRET_USERNAME: ${{ secrets.USERNAME }}
    SECRET_PASSWORD: ${{ secrets.PASSWORD }}
    EXTENSION_KEY: 'github_actions_test'
    UPLOAD_MESSAGE: ${{ github.event.release.body }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
366,"steps:
    - uses: actions/checkout@v2

    - run: echo hello > world.txt

    - uses: actions/upload-artifact@v2
      with:
          name: my-artifact
          path: world.txt

    # delete-artifact
    - uses: geekyeggo/delete-artifact@v2
      with:
          name: my-artifact

steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
          name: |
              artifact-*
              binary-file
              output

steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
          name: okay-to-keep
          failOnError: false
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
367,"uses: codespell-project/actions-codespell@v1

uses: codespell-project/actions-codespell@v1
with:
  check_filenames: true

uses: codespell-project/actions-codespell@v1
with:
  check_hidden: true

uses: codespell-project/actions-codespell@v1
with:
  exclude_file: src/foo

uses: codespell-project/actions-codespell@v1
with:
  skip: foo,bar

uses: codespell-project/actions-codespell@v1
with:
  builtin: clear,rare

uses: codespell-project/actions-codespell@v1
with:
  ignore_words_file: .codespellignore

uses: codespell-project/actions-codespell@v1
with:
  ignore_words_list: abandonned,ackward

uses: codespell-project/actions-codespell@v1
with:
  uri_ignore_words_list: abandonned

uses: codespell-project/actions-codespell@v1
with:
  path: src

uses: codespell-project/actions-codespell@v1
with:
  only_warn: 1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
368,"steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2

steps:
- uses: actions/checkout@v3
- uses: actions/setup-python@v3
  with:
    python-version: 3.9
- uses: TrueBrain/actions-flake8@v2
  with:
    path: src

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    flake8_version: 3.8.0

steps:
- uses: actions/checkout@v3
- run: pip install flake8==3.8.0
- uses: TrueBrain/actions-flake8@v2

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    path: src

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    ignore: E4,W

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    max_line_length: 90

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    only_warn: 1

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    plugins: flake8-bugbear cohesion==0.9.1

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    error_classes: E,H

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    warning_classes: W,B,D

steps:
- uses: actions/checkout@v3
- uses: TrueBrain/actions-flake8@v2
  with:
    extra_arguments: ""--hang-closing""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
369,"    - uses: codespell-project/sort-problem-matcher@v1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
370,"name: Caching Primes

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1

    - name: Cache Primes
      id: cache-primes
      uses: actions/cache@v1
      with:
        path: prime-numbers
        key: ${{ runner.os }}-primes

    - name: Generate Prime Numbers
      if: steps.cache-primes.outputs.cache-hit != \'true\'
      run: /generate-primes.sh -d prime-numbers
    
    - name: Use Prime Numbers
      run: /primes.sh -d prime-numbers

steps:
  - uses: actions/checkout@v1

  - uses: actions/cache@v1
    id: cache
    with:
      path: path/to/dependencies
      key: ${{ runner.os }}-${{ hashFiles(\'**/lockfiles\') }}
  
  - name: Install Dependencies
    if: steps.cache.outputs.cache-hit != \'true\'
    run: /install.sh
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
371,"name: automerge
on:
  pull_request:
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}
jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - id: automerge
        name: automerge
        uses: ""pascalgn/automerge-action@v0.15.6""
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""

        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          MERGE_LABELS: ""automerge,!work in progress""
          MERGE_REMOVE_LABELS: ""automerge""
          MERGE_METHOD: ""squash""
          MERGE_COMMIT_MESSAGE: ""pull-request-description""
          MERGE_FORKS: ""false""
          MERGE_RETRIES: ""6""
          MERGE_RETRY_SLEEP: ""10000""
          MERGE_REQUIRED_APPROVALS: ""0""
          UPDATE_LABELS: """"
          UPDATE_METHOD: ""rebase""
          PULL_REQUEST: ""1234""

    steps:
      - id: automerge
        name: automerge
        uses: ""pascalgn/automerge-action@v0.15.6""
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
      - name: feedback
        if: steps.automerge.outputs.mergeResult == ""merged""
        run: |
          echo ""Pull request ${{ steps.automerge.outputs.pullRequestNumber }} merged!""

      - name: automerge
        uses: pascalgn/automerge-action@...
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
          LOG: ""TRACE""  # or ""DEBUG""

GITHUB_TOKEN=""123abc...""
URL=""https://github.com/pascalgn/repository-name/pull/123""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
372,"jobs:\r
  ci:\r
    name: >-\r
      Ruby: ${{ matrix.ruby }}  OS: ${{ matrix.os }}\r
    runs-on: ${{ matrix.os }}\r
    strategy:\r
      fail-fast: false\r
      matrix:\r
        os: [ 'ubuntu-18.04', 'macos', 'windows-latest' ]\r
        ruby: [ '2.3.x', '2.4.x', '2.5.x', '2.6.x' ]\r
    steps:\r
      - name: repo checkout\r
        uses: actions/checkout@v1\r
        with:\r
          fetch-depth: 10\r
      - name: Setup Ruby, update MSYS2\r
        uses: MSP-Greg/actions-ruby@master\r
        with:\r
          ruby-version: ${{ matrix.ruby }}\r
          base: update\r
          mingw: openssl\r

runs-on: 'windows-latest'\r
strategy:\r
  matrix:\r
    ruby: [ '2.4.x', '2.5.x', '2.6.x', '9.9.x' ]\r
steps:\r
- name: Install Ruby, update MSYS2\r
  uses: MSP-Greg/actions-ruby@master\r
  with:\r
    ruby-version: ${{ matrix.ruby }}\r
    base: update\r
    mingw: openssl ragel\r

runs-on: 'windows-latest'\r
strategy:\r
  matrix:\r
    ruby: [ '2.4.x', '2.5.x', '2.6.x', '9.9.x' ]\r
steps:\r
- name: Install Ruby\r
  uses: MSP-Greg/actions-ruby@master\r
  with:\r
    ruby-version: ${{ matrix.ruby }}\r

actions-ruby     default\r
Ruby 2.3.3       not available\r
Ruby 2.4.9        2.4.6\r
Ruby 2.5.7        2.5.5\r
Ruby 2.6.5        2.6.3\r
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
373,"name: npm-publish
on:
  push:
    branches:
      - main # Change this to your default branch
jobs:
  npm-publish:
    name: npm-publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Publish if version has been updated
      uses: pascalgn/npm-publish-action@1.3.9
      with: # All of theses inputs are optional
        tag_name: ""v%s""
        tag_message: ""v%s""
        create_tag: ""true""
        commit_pattern: ""^Release (\\\\S+)""
        workspace: "".""
        publish_command: ""yarn""
        publish_args: ""--non-interactive""
      env: # More info about the environment variables in the README
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Leave this as is, it\'s automatically generated
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }} # You need to set this in your repo settings
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
374,"steps:
  - uses: actions/checkout@v2
  - uses: excitedleigh/setup-nox@v2.0.0
  - run: nox
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
375,"- name: Execute SSH commmands on remote server
  uses: JimCronqvist/action-ssh@master
  with:
    hosts: \'user@domain.com\'
    privateKey: ${{ secrets.PRIVATE_KEY }}
    command: ls -lah

- name: Execute SSH commmands on remote server
  uses: JimCronqvist/action-ssh@master
  env:
    NAME: ""Root""
  with:
    hosts: \'user@domain.com user@domain2.com:2222\'
    privateKey: ${{ secrets.PRIVATE_KEY }}
    debug: false
    command: |
      ls -lah
      echo ""I am $NAME""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
376,"name: ""Test""
on:
  pull_request:
  push:
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - run: nix-build

name: ""Test""
on:
  pull_request:
  push:
jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    - run: nix build
    - run: nix flake check

- name: Print nixpkgs version
  run: nix-instantiate --eval -E \'(import <nixpkgs> {}).lib.version\'

- uses: cachix/install-nix-action@vXX
  with:
    extra_nix_config: ""system-features = nixos-test benchmark big-parallel kvm""

nix-env -i mypackage -f \'<nixpkgs>\'

- uses: cachix/cachix-action@vXX
   with:
     name: mycache
     authToken: \'${{ secrets.CACHIX_AUTH_TOKEN }}\'
     extraPullNames: nix-community

- uses: cachix/install-nix-action@v22
  with:
    extra_nix_config: |
      trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
      substituters = https://hydra.iohk.io https://cache.nixos.org/

- name: Run a command with nix develop
  run: nix develop --ignore-environment --keep MY_ENV_VAR --command echo $MY_ENV_VAR
  env:
    MY_ENV_VAR: ""hello world""

nix develop --impure
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
377,"$ yarn install

$ yarn build

$ yarn test
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
378,"name: Android CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
      - name: Build with Gradle
        uses: manimaul/android-builder-action@v2
        with:
          entrypoint: /github/workspace/gradlew
          args: --no-daemon build

cd /path/to/your/android/project
docker run -v $(pwd):/build \\
            -w /build \\
            --entrypoint /build/gradlew \\
            manimaul/android-sdk:latest \\
            --no-daemon build
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
379,"steps:
  - name: Checkout
    uses: actions/checkout@v1
  - run: commandToBuildYourProject.sh
  - name: Dockerize
    if: success()
    uses: manusa/actions-publish-docker@v1.1.2
    with:
      name: organization/image_name
      username: ${{ secrets.DOCKER_HUB_USER }}
      password: ${{ secrets.DOCKER_HUB_PASSWORD }}

steps:
  - name: Checkout
    uses: actions/checkout@v1
  - run: commandToBuildYourProject.sh
  - name: Dockerize
    if: success()
    uses: manusa/actions-publish-docker@v1.1.2
    with:
      name: organization/image_name
      username: ${{ secrets.DOCKER_HUB_USER }}
      password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      tag script: |
        return context.ref
          .replace(\'refs/heads/
          .replace(\'refs/tags/\'
          .replace(\'refs/pull/\'
          .replace(/\\//g, \'_\')
          .replace(/#/g, \'\');
      registry: localhost:5000
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
380,"name: Backport

on:
  pull_request:
    types:
      - closed
      - labeled

jobs:
  backport:
    runs-on: ubuntu-latest
    name: Backport closed pull request
    steps:
      - uses: sbrunner/backport-action@v2.0.0
        with:
          token: ${{ secrets.BACKPORT_GITHUB_TOKEN }}

if: ""!startsWith(github.event.head_commit.message, \'[skip ci] \')""

pip install pre-commit
pre-commit install --allow-missing-config
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
381,"name: Backport

on:
  pull_request:
    types:
      - closed
      - labeled

jobs:
  backport:
    runs-on: ubuntu-latest
    name: Backport closed pull request
    steps:
      - uses: sbrunner/backport-action@v2.0.0
        with:
          token: ${{ secrets.BACKPORT_GITHUB_TOKEN }}

if: ""!startsWith(github.event.head_commit.message, \'[skip ci] \')""

pip install pre-commit
pre-commit install --allow-missing-config
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
382,"pip install pre-commit
pre-commit install --allow-missing-config
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
383,"name: Merge me!

on:
  workflow_run:
    types:
      - completed
    workflows:
      # List all required workflow names here.
      - 'Continuous Integration'

jobs:
  merge-me:
    name: Merge me!
    runs-on: ubuntu-latest
    steps:
      - # It is often a desired behavior to merge only when a workflow execution
        # succeeds. This can be changed as needed.
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          # Depending on branch protection rules, a  manually populated
          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to
          # a protected branch must be used. This secret can have an arbitrary
          # name, as an example, this repository uses `DOTTBOTT_TOKEN`.
          #
          # When using a custom token, it is recommended to leave the following
          # comment for other developers to be aware of the reasoning behind it:
          #
          # This must be used as GitHub Actions token does not support pushing
          # to protected branches.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Merge me!

on:
  check_suite:
    types:
      - completed

jobs:
  merge-me:
    name: Merge me!
    runs-on: ubuntu-latest
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Continuous Integration

on:
  # Trigger on Pull Requests against the master branch.
  pull_request_target:
    branches:
      - master
    types:
      - opened
      - synchronize
  # Trigger on Pull Requests to the master branch.
  push:
    branches:
      - master

jobs:
  # Add other CI jobs, such as testing and linting. The example test job
  # showcases checkout settings which support `pull_request_target` and `push`
  # triggers at the same time.
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # This adds support for both `pull_request_target` and `push` events.
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com
      - # This allows private dependencies from GitHub Packages to be installed.
        # Depending on the setup, it might be required to use a personal access
        # token instead.
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        name: Install dependencies
        run: npm ci --ignore-scripts --no-audit --no-progress
      - name: Test
        run: npm run test
  merge-me:
    name: Merge me!
    needs:
      # List all required job names here.
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          # Depending on branch protection rules, a  manually populated
          # `GITHUB_TOKEN_WORKAROUND` secret with permissions to push to
          # a protected branch must be used. This secret can have an arbitrary
          # name, as an example, this repository uses `DOTTBOTT_TOKEN`.
          #
          # When using a custom token, it is recommended to leave the following
          # comment for other developers to be aware of the reasoning behind it:
          #
          # This must be used as GitHub Actions token does not support pushing
          # to protected branches.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    timeout-minutes: 5

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_LOGIN: my-awesome-bot-r2d2
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_LOGIN: dependabot-preview
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_GITHUB_API_PREVIEW: true

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: MERGE

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRESET: DEPENDABOT_PATCH

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          MAXIMUM_RETRIES: 2

jobs:
  merge-me:
    steps:
      - name: Merge me!
        uses: ridedott/merge-me-action@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLED_FOR_MANUAL_CHANGES: 'true'

git clone git@github.com:ridedott/merge-me-action.git

cd merge-me-action
npm install

npm run test
npm run test:watch
npm run test:coverage

npm run format
npm run format:fix

npm run lint
npm run lint:fix
","[1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
384,"# main.yml
name: CI

on:
  push:
    branches:
      - master
  pull_request: ~

jobs:
  test-sqflint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: arma-actions/sqflint@v1.0
        name: Validate with SQFLint

# main.yml
jobs:
  test-sqflint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: arma-actions/sqflint@v1.0
        name: Validate with SQFLint with custom arguments
        with:
          args: --exit w --directory Missionframework
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
385,"- name: Slack Notification
  uses: lazy-actions/slatify@master
  if: always()
  with:
    type: ${{ job.status }}
    job_name: \'*Test*\'
    channel: \'#random\'
    url: ${{ secrets.SLACK_WEBHOOK }}

- name: Slack Notification
  uses: lazy-actions/slatify@master
  if: always()
  with:
    type: ${{ job.status }}
    job_name: \'*Lint Check*\'
    mention: \'here\'
    mention_if: \'failure\'
    channel: \'#random\'
    url: ${{ secrets.SLACK_WEBHOOK }}
    commit: true
    token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
386,"- uses: leafo/gh-actions-lua@v9
- uses: leafo/gh-actions-luarocks@v4

# Install some package
- name: install a module
  run: luarocks install moonscript

- uses: leafo/gh-actions-luarocks@v4
  with:
    luarocksVersion: ""3.1.3""

- uses: leafo/gh-actions-luarocks@v4
  with:
    withLuaPath: ""/usr/local/openresty/luajit/""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
387,"steps:
  - uses: actions/checkout@v3
  - uses: s-weigand/setup-conda@v1
  - run: conda --version
  - run: which python

steps:
  - uses: actions/checkout@v3
  - name: Set up Python 3.8
    uses: actions/setup-python@v4
    with:
      python-version: 3.8
  - uses: s-weigand/setup-conda@v1
    with:
      activate-conda: false
  - run: conda --version
  - run: which python

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: [3.6, 3.7, 3.8]
    name: Python ${{ matrix.python-version }} example
    steps:
      - uses: actions/checkout@v3
      - name: Setup conda
        uses: s-weigand/setup-conda@v1
        with:
          update-conda: true
          python-version: ${{ matrix.python-version }}
          conda-channels: anaconda, conda-forge
      - run: conda --version
      - run: which python
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
388,"name: Release

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: macOS-10.14
    steps:
    - uses: actions/checkout@v1
    - name: Build
      run: make
    - name: Upload asset to release
      uses: csexton/release-asset-action@v2
      with:
        file: my-release.zip
        github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: false

name: Build and relase

on:
 push:
   tags:
     - \'v*\'

jobs:
 build:
   runs-on: ubuntu-latest
   steps:
   - uses: actions/checkout@v1
   - name: Create Release
     id: create_release
     uses: actions/create-release@v1
     env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     with:
       tag_name: ${{ github.ref }}
       release_name: Release ${{ github.ref }}
       body: Auto generated release
       draft: true
       prerelease: false
   - name: Build
     run: make
   - name: Upload Assets to Release with a wildcard
     uses: csexton/release-asset-action@v2
     with:
       pattern: ""build/*""
       github-token: ${{ secrets.GITHUB_TOKEN }}
       release-url: ${{ steps.create_release.outputs.upload_url }}

    - name: Upload asset to release
      uses: csexton/release-asset-action@v2
      with:
        file: my-release.zip
        github-token: ${{ secrets.GITHUB_TOKEN }}

- name: Upload multiple assets to release
  uses: csexton/release-asset-action@v2
  with:
    files: |
      first.zip
      second.zip
      third.tar.gz
    github-token: ${{ secrets.GITHUB_TOKEN }}

- name: Upload Assets to Release with a wildcard
  uses: csexton/release-asset-action@v2
  with:
    pattern: ""build/*.zip""
    github-token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
389,"  cancel-multiple-workflow-runs:
    name: ""Cancel the self CI workflow run""
    runs-on: ubuntu-latest
    steps:
      - name: ""Cancel workflow 1""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: allDuplicates
          cancelFutureDuplicates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowFileName: workflow_1.yml
      - name: ""Cancel workflow 2""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: allDuplicates
          cancelFutureDuplicates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowFileName: workflow_2.yml

name: Cancelling Duplicates
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  cancel-duplicate-workflow-runs:
    name: ""Cancel duplicate workflow runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel duplicate workflow runs""
        with:
          cancelMode: allDuplicates
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  cancel-duplicate-workflow-runs:
    name: ""Cancel duplicate workflow runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel duplicate workflow runs""
        with:
          cancelMode: duplicates
          cancelFutureDuplicates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
          notifyPRCancel: true
          skipEventTypes: \'[""push"", ""schedule""]\'

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  cancel-duplicate-ci-runs:
    name: ""Cancel duplicate CI runs""
    runs-on: ubuntu-latest
    outputs:
      sourceHeadRepo: ${{ steps.cancel.outputs.sourceHeadRepo }}
      sourceHeadBranch: ${{ steps.cancel.outputs.sourceHeadBranch }}
      sourceHeadSha: ${{ steps.cancel.outputs.sourceHeadSha }}
      sourceEvent: ${{ steps.cancel.outputs.sourceEvent }}
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        id: cancel
        name: ""Cancel duplicate CI runs""
        with:
          cancelMode: duplicates
          cancelFutureDuplicates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          notifyPRCancel: true
          notifyPRMessageStart: |
            Note! The Docker Images for the build are prepared in a separate workflow,
            that you will not see in the list of checks.

            You can checks the status of those images in:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel duplicate Cancelling runs""
        with:
          cancelMode: namedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          notifyPRCancel: true
          jobNameRegexps: >
            [""Build info
            repo: ${{ steps.cancel.outputs.sourceHeadRepo }}
            branch: ${{ steps.cancel.outputs.sourceHeadBranch }}.*""]

  build-info:
    name: >
      Build info
      repo: ${{ needs.cancel-workflow-runs.outputs.sourceHeadRepo }}
      branch: ${{ needs.cancel-workflow-runs.outputs.sourceHeadBranch }}
    runs-on: ubuntu-latest
    needs: [cancel-duplicate-ci-runs]
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}
    steps:
      - name: >
          [${{ needs.cancel-workflow-runs.outputs.sourceEvent }}] will checkout
          Run id: ${{ github.run_id }}
          Source Run id: ${{ github.event.workflow_run.id }}
          Sha: ${{ needs.cancel-workflow-runs.outputs.sourceHeadSha }}
          Repo: ${{ needs.cancel-workflow-runs.outputs.sourceHeadRepo }}
          Branch: ${{ needs.cancel-workflow-runs.outputs.sourceHeadBranch }}
        run: |
          printenv

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

  cancel-self-source-workflow-run:
    name: ""Cancel the self CI workflow run""
    runs-on: ubuntu-latest
    steps:
      - name: ""Cancel the self CI workflow run""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: self
          notifyPRCancel: true
          notifyPRCancelMessage: Cancelled because image building failed.
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

  cancel-self-cancelling-run:
    name: ""Cancel the self Canceling workflow run""
    runs-on: ubuntu-latest
    steps:
      - name: ""Cancel the self Cancelling workflow run""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: self
          notifyPRCancel: true
          token: ${{ secrets.GITHUB_TOKEN }}


name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  fail-fast-triggered-workflow-named-jobs-runs:
    name: ""Fail fast CI runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Fail fast CI runs""
        with:
          cancelMode: failedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
          notifyPRCancel: true
          jobNameRegexps: \'[""^Static checks$"", ""^Build docs$"", ""^Build prod image.*""]\'

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  fail-fast-triggered-workflow-named-jobs-runs:
    name: ""Fail fast CI runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Fail fast CI. Source run: ${{ github.event.workflow_run.id }}""
        id: cancel-failed
        with:
          cancelMode: failedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          sourceRunId: ${{ github.event.workflow_run.id }}
          notifyPRCancel: true
          jobNameRegexps: \'[""^Static checks$"", ""^Build docs$"", ""^Build prod image.*""]\'
      - name: ""Extract canceled failed runs""
        id: extract-cancelled-failed-runs
        if: steps.cancel-failed.outputs.cancelledRuns != \'[]\'
        run: |
            REGEXP=""Fail fast CI. Source run: ""
            SEPARATOR=""""
            for run_id in $(echo ""${{ steps.cancel-failed.outputs.cancelledRuns }}"" | jq \'.[]\')
            do
                REGEXP=""${REGEXP}${SEPARATOR}(${run_id})""
                SEPARATOR=""|""
            done
            echo ""::set-output name=matching-regexp::${REGEXP}""
      - name: ""Cancel triggered \'Cancelling\' runs for the cancelled failed runs""
        if: steps.cancel-failed.outputs.cancelledRuns != \'[]\'
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: namedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          notifyPRCancel: true
          jobNameRegexps: ${{ steps.extract-cancelled-failed.runs.matching-regexp }}


name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  fail-fast-triggered-workflow-named-jobs-runs:
    name: ""Fail fast Canceling runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Fail fast Canceling runs""
        with:
          cancelMode: failedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          jobNameRegexps: \'[""^Static checks$"", ""^Build docs$"", ""^Build prod image.*""]\'

name: Cancelling
on:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

  cancel-other-workflow-run:
    name: ""Cancel the self CI workflow run""
    runs-on: ubuntu-latest
    steps:
      - name: ""Cancel the self CI workflow run""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: duplicates
          cancelFutureDuplicates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          workflowFileName: other_workflow.yml

on:
  push:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  cancel-self-failed-runs:
    name: ""Cancel the self workflow run""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel past CI runs""
        with:
          cancelMode: allDuplicatedNamedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          jobNameRegexps: \'[""Branch: .* Repo: .* Event: .* ""]\'
          selfPreservation: false
          notifyPRCancel: true


name: CI
on: push
jobs:
  cancel-duplicate-workflow-runs:
    name: ""Cancel duplicate workflow runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel duplicate workflow runs""
        with:
          cancelMode: duplicates
          cancelFutureDuplicates: true
          notifyPRCancel: true

name: CI
on: push
jobs:
  cancel-self-run:
    name: ""Cancel the self workflow run""
    runs-on: ubuntu-latest
    steps:
      - name: ""Cancel the self workflow run""
        uses: potiuk/cancel-workflow-runs@master
        with:
          cancelMode: self
          token: ${{ secrets.GITHUB_TOKEN }}
          notifyPRCancel: true

name: CI
on:
  push:

jobs:
  cancel-self-failed-runs:
    name: ""Cancel failed runs""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel failed runs""
        with:
          cancelMode: failedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          jobNameRegexps: \'[""^Static checks$"", ""^Build docs$"", ""^Build prod image.*""]\'
          notifyPRCancel: true

on:
  push:
  workflow_run:
    workflows: [\'CI\']
    types: [\'requested\']

jobs:
  cancel-self-failed-runs:
    name: ""Cancel the self workflow run""
    runs-on: ubuntu-latest
    steps:
      - uses: potiuk/cancel-workflow-runs@master
        name: ""Cancel past CI runs""
        with:
          cancelMode: namedJobs
          token: ${{ secrets.GITHUB_TOKEN }}
          jobNameRegexps: \'[""^Static checks$"", ""^Build docs$"", ""^Build prod image.*""]\'
          notifyPRCancel: true
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
390,"    - name: cancelling
      uses: andymckay/cancel-action@0.3
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
391,"name: ""Create cluster using KinD""
on: [pull_request, push]

jobs:
  kind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: engineerd/setup-kind@v0.5.0
      - name: Testing
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo ""current-context:"" $(kubectl config current-context)
          echo ""environment-kubeconfig:"" ${KUBECONFIG}

name: ""Create cluster using KinD""
on: [pull_request, push]

jobs:
  kind:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: engineerd/setup-kind@v0.5.0
        with:
          version: ""v0.11.1""
      - name: Testing
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          echo ""current-context:"" $(kubectl config current-context)
          echo ""environment-kubeconfig:"" ${KUBECONFIG}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
392,"# File: .github/workflows/repo-sync.yml

on:
  schedule:
  - cron:  ""*/15 * * * *""
  workflow_dispatch:

jobs:
  repo-sync:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: repo-sync
      uses: repo-sync/github-sync@v2
      with:
        source_repo: """"
        source_branch: """"
        destination_branch: """"
        github_token: ${{ secrets.PAT }}

with:
  sync_tags: ""true""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
393,"name: Sanity check
on: [pull_request]

jobs:
  commits_check_job:
    runs-on: ubuntu-latest
    name: Commits Check
    steps:
    - name: Get PR Commits
      id: 'get-pr-commits'
      uses: tim-actions/get-pr-commits@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
394,"name: Sanity check
on: [pull_request]

jobs:
  commits_check_job:
    runs-on: ubuntu-latest
    name: Commits Check
    steps:
    - name: Get PR Commits
      id: 'get-pr-commits'
      uses: tim-actions/get-pr-commits@master
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: DCO Check
      uses: tim-actions/dco@master
      with:
        commits: ${{ steps.get-pr-commits.outputs.commits }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
395,"name: clang-format Check
on: [push, pull_request]
jobs:
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: \'13\'
        check-path: \'src\'
        fallback-style: \'Mozilla\' # optional

name: clang-format Check
on: [push, pull_request]
jobs:
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - \'src\'
          - \'examples\'
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: \'13\'
        check-path: ${{ matrix.path }}
        fallback-style: \'Mozilla\' # optional

name: clang-format Check
on: [push, pull_request]
jobs:
  formatting-check:
    name: Formatting Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path:
          - check: \'src\'
            exclude: \'(hello|world)\' # Exclude file paths containing ""hello"" or ""world""
          - check: \'examples\'
            exclude: \'\'              # Nothing to exclude
    steps:
    - uses: actions/checkout@v3
    - name: Run clang-format style check for C/C++/Protobuf programs.
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: \'13\'
        check-path: ${{ matrix.path[\'check\'] }}
        exclude-regex: ${{ matrix.path[\'exclude\'] }}
        fallback-style: \'Mozilla\' # optional
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
396,"""require-dev"": {
    ""dealerdirect/phpcodesniffer-composer-installer"": ""^0.4.4"",
    ""wp-coding-standards/wpcs"": ""^2.1"",
    ""automattic/vipwpcs"": ""^2.0"",
    ""moderntribe/tribalscents"": ""dev-master"",
    ...
}

""repositories"": [
    {
      ""name"": ""moderntribe/TribalScents"",
      ""type"": ""github"",
      ""url"": ""https://github.com/moderntribe/TribalScents"",
      ""no-api"": true
    }
]

<?xml version=""1.0""?>
<ruleset name=""Modern Tribe Plugin Coding Standards"">
\t<rule ref=""TribalScents""></rule>
\t<rule ref=""WordPress-VIP-Go""></rule>
\t<rule ref=""WordPress"">
\t\t<exclude name=""WordPress.Files.FileName""/>
\t</rule>
\t<rule ref=""WordPress-Extra""></rule>
\t<rule ref=""WordPress-Docs""></rule>
\t<rule ref=""WordPress-Core""></rule>
</ruleset>

- uses: moderntribe/action-tribe-phpcs@master
  with:
    github_bot_token: ${{ secrets.GH_BOT_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
397,"on: pull_request
name: CI
jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            +(src|__tests__)/**/*.ts
            !src/exclude.ts
          FILES: |
            yarn.lock
            .eslintrc
      - name: Install Package dependencies
        run: yarn install
        if: env.GIT_DIFF
      - name: Check code style
        # Check only if there are differences in the source code
        run: yarn lint
        if: env.GIT_DIFF

on: pull_request
name: CI
jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            +(src|__tests__)/**/*.ts
          FILES: |
            yarn.lock
            .eslintrc
      - name: Install Package dependencies
        run: yarn install
        if: env.GIT_DIFF
      - name: Check code style
        # Check only source files with differences
        run: yarn eslint ${{ env.GIT_DIFF_FILTERED }}  # e.g. yarn eslint \'src/main.ts\' \'__tests__/test.ts\'
        if: env.GIT_DIFF && !env.MATCHED_FILES
      - name: Check code style
        # Check only if there are differences in the source code (Run a lint on all files if there are changes to yarn.lock or .eslintrc)
        run: yarn lint
        if: env.GIT_DIFF && env.MATCHED_FILES

git diff ${FROM}${DOT}${TO} \'--diff-filter=${DIFF_FILTER}\' --name-only

DOT: \'...\'
DIFF_FILTER: \'AMRC\'

git diff ${FROM}...${TO} \'--diff-filter=AMRC\' --name-only

.github/workflows/ci.yml
__tests__/utils/command.test.ts
package.json
src/main.ts
src/utils/command.ts
src/docs.md
yarn.lock

PATTERNS: |
  src/**/*.+(ts|md)
  !src/utils/*

src/main.ts
src/docs.md

FILES: package.json

package.json
anywhere/package.json

/home/runner/work/my-repo-name/my-repo-name/src/main.ts
/home/runner/work/my-repo-name/my-repo-name/src/docs.md

SEPARATOR: \' \'

/home/runner/work/my-repo-name/my-repo-name/src/main.ts /home/runner/work/my-repo-name/my-repo-name/src/docs.md

on:
  pull_request:
    types: [opened, reopened, synchronize, closed, ready_for_review]

jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          CHECK_ONLY_COMMIT_WHEN_DRAFT: true
      # ...

on: pull_request
name: CI
jobs:
  dump:
    name: Dump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            +(src|__tests__)/**/*.ts
            !src/exclude.ts
          FORMAT: json
      - run: echo \'${{ env.GIT_DIFF }}\' | jq .

> Run echo \'[""yarn.lock""]\' | jq .
[
  ""yarn.lock""
]

on: pull_request
name: CI
jobs:
  dump:
    name: Dump
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: \'*.ts\'
          RELATIVE: \'src/abc\'
      - run: echo ${{ env.GIT_DIFF }}

> Run echo \'test1.ts\' \'test2.ts\'
test1.ts test2.ts
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
398,"- uses: travisj/build-number-action@v1
  id: my-project-build-number

- name: Echo Build Number
  run: echo $BUILD_NUMBER
  env:
    BUILD_NUMBER: ${{ steps.my-project-build-number.outputs.build-number }}

- uses: travisj/build-number-action@v1
  id: my-project-build-number
  with:
    key: my-project
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
399,"steps:
  # Reference a docker image from GitHub Container Registry (recommended for speed & security)
  - uses: docker://ghcr.io/codfish/semantic-release-action@sha256:4675eae74abbabc869298ca798833fef291ce30fb9edfac76787746e7d9d3904
  # Reference the major version of a release
  - uses: codfish/semantic-release-action@v2
  # Reference a specific commit
  - uses: codfish/semantic-release-action@4e0079a1e7511dab622628e1bf298e572a9f3d22
  # Reference a minor version of a release
  - uses: codfish/semantic-release-action@v1.10
  # Reference a branch
  - uses: codfish/semantic-release-action@main

steps:
  # Reference a docker image from GitHub Container Registry
  - uses: docker://ghcr.io/codfish/semantic-release-action:v2
  # Reference a docker image from Dockerhub
  - uses: docker://codfish/semantic-release-action:v2

steps:
  # Reference a docker image from GitHub Container Registry (example for v2.0.0)
  - uses: docker://ghcr.io/codfish/semantic-release-action@<digest>

steps:
  - uses: actions/checkout@v3

  - uses: codfish/semantic-release-action@v2
    with:
      # specify default branches to add support for the `main` branch
      # which semantic-release doesn\'t have as a default yet.
      branches: |
        [
          \'+([0-9])?(.{+([0-9]),x}).x\',
          \'main\',
          \'next\',
          \'next-major\',
          {
            name: \'beta\',
            prerelease: true
          },
          {
            name: \'alpha\',
            prerelease: true
          }
        ]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - uses: actions/checkout@v3

  # you\'ll need to add an `id` in order to access output variables
  - uses: codfish/semantic-release-action@v2
    id: semantic
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  - run: echo ${{ steps.semantic.outputs.release-version }}

  - run: echo ""$OUTPUTS""
    env:
      OUTPUTS: ${{ toJson(steps.semantic.outputs) }}

  - uses: codfish/some-other-action@v1
    with:
      release-version: ${{ steps.semantic.outputs.release-version }}

steps:
  - uses: actions/checkout@v3

  # you\'ll need to add an `id` in order to access output variables
  - uses: codfish/semantic-release-action@v2
    id: semantic
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  - name: docker push version
    if: steps.semantic.outputs.new-release-published == \'true\'
    run: |
      docker tag some-image some-image:$TAG
      docker push some-image:$TAG
    env:
      TAG: v$RELEASE_VERSION

steps:
  - uses: actions/checkout@v3

  - uses: codfish/semantic-release-action@v2
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  - run: |
      echo $RELEASE_VERSION
      echo $RELEASE_MAJOR
      echo $RELEASE_MINOR
      echo $RELEASE_PATCH

steps:
  - run: npx semantic-release
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

steps:
  - run: codfish/semantic-release-action@v2
    with:
      dry_run: true
      branches: |
        [
          \'+([0-9])?(.{+([0-9]),x}).x\',
          \'main\',
          \'next\',
          \'next-major\',
          {
            name: \'beta\',
            prerelease: true
          },
          {
            name: \'alpha\',
            prerelease: true
          }
        ]
      repository_url: https://github.com/codfish/semantic-release-action.git
      tag_format: \'v${version}\'
      extends: \'@semantic-release/apm-config\'
      additional_packages: |
        [\'@semantic-release/apm@4.0.0\', \'@semantic-release/git\']
      plugins: |
        [\'@semantic-release/commit-analyzer\', \'@semantic-release/release-notes-generator\', \'@semantic-release/github\', \'@semantic-release/apm\', \'@semantic-release/git\']
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

git tag -fa v2 -m ""Update v2 tag"" && git push origin v2 --force
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
400,"  - name: run lupdate
    uses: Mudlet/lupdate-action@master
    with:
      args: -recursive ./src/ ./3rdparty/dblsqd/dblsqd ./3rdparty/edbee-lib/edbee-lib -ts ./translations/mudlet.ts
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
401,"name: my-workflow

on: [push]

jobs:
  autocommit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # Do something here, pre-stage.
      - uses: autosuite/autocommit@master
        with:
          commit-message: Your custom commit message here.
          add-options: -A
      - uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
402,"uses: peterjgrainger/action-create-branch@v2.2.0
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
with:
  branch: \'release-notes\'
  sha: \'${{ github.event.pull_request.head.sha }}\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
403,"name: Whitespace linter

on:
  issue_comment:
    types: [created]

jobs:
  whitespace_lint:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/wslint')
    steps:
    - uses: actions/checkout@v2
    - name: Whitespace linter
      uses: hexrabbit/whitespace-lint@v0.0.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
404,"name: reviewdog
on: [pull_request]
permissions:
  contents: read
  pull-requests: write
jobs:
  rubocop:
    name: runner / rubocop
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.0
      - name: rubocop
        uses: reviewdog/action-rubocop@v2
        with:
          rubocop_version: gemfile
          rubocop_extensions: rubocop-rails:gemfile rubocop-rspec:gemfile
          reporter: github-pr-review # Default is github-pr-check
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
405,"---
name: ""pre-release""

on:
  push:
    branches:
      - ""master""

jobs:
  pre-release:
    name: ""Pre Release""
    runs-on: ""ubuntu-latest""

    steps:
      # ...
      - name: ""Build & test""
        run: |
          echo ""done!""

      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          automatic_release_tag: ""latest""
          prerelease: true
          title: ""Development Build""
          files: |
            LICENSE.txt
            *.jar

---
name: ""tagged-release""

on:
  push:
    tags:
      - ""v*""

jobs:
  tagged-release:
    name: ""Tagged Release""
    runs-on: ""ubuntu-latest""

    steps:
      # ...
      - name: ""Build & test""
        run: |
          echo ""done!""

      - uses: ""marvinpinto/action-automatic-releases@latest""
        with:
          repo_token: ""${{ secrets.GITHUB_TOKEN }}""
          prerelease: false
          files: |
            LICENSE.txt
            *.jar

- uses: ""marvinpinto/action-automatic-releases@<VERSION>""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
406,"workflow ""On push"" {
  on = ""push""
  resolves = [""Update mirror""]
}

action ""Update mirror"" {
  uses = ""fnkr/github-action-git-bash@v1""
  secrets = [""GITHUB_TOKEN"", ""SSH_KEY""]
  args = [""bash"", ""-c"", ""{ [ \\""$(git rev-parse --abbrev-ref HEAD)\\"" = \\""master\\"" ] || exit 78; } && rm -rf .github && git add -A .github && git commit -m \\""Remove .github\\"" && git remote set-url origin git@github.com:GITHUB/PROJECT.git && git push --force origin master""]
}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
407,"
workflow ""Detect Secrets"" {
  on = ""push""
  resolves = [""nasa-gibs/trufflehog-actions-scan""]
}

action ""nasa-gibs/trufflehog-actions-scan"" {
  uses = ""nasa-gibs/trufflehog-actions-scan@master""
}


steps:
- uses: actions/checkout@master
- name: trufflehog-actions-scan
  uses: nasa-gibs/trufflehog-actions-scan@master

steps:
- uses: actions/checkout@master
- name: trufflehog-actions-scan
  uses: nasa-gibs/trufflehog-actions-scan@master
  with:
    scanArguments: ""--regex --entropy=False --max_depth=5"" # Add custom options here*


steps:
- uses: actions/checkout@master
- name: trufflehog-actions-scan
  uses: nasa-gibs/trufflehog-actions-scan@master
  with:
    githubToken: ${{ secrets.GITHUB_CLONE_TOKEN }} # You have to create an access token manually

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
408,"uses: mrb0nj/gitversion@master
with:
  args: '-output buildserver'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
409,"- name: Deploy to server
  uses: houseofmaldorne/rsync-deploy@v2.0
  env:
    DEPLOY_KEY: ${{ secrets.REMOTE_SSH_KEY }}
    REMOTE_USER: ${{ secrets.REMOTE_USER }}
    REMOTE_SERVER: ${{ secrets.REMOTE_SERVER }}
    REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
    REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
    FOLDER: ""./""
    EXCLUDE_LIST: "".github/workflows/exclude.txt""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
410,"- name: deploy to server
        uses: AEnterprise/rsync-deploy@v1.0.2
        env:
          DEPLOY_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: ""-e -c -r --delete""
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          FOLDER: ""./""
          SERVER_IP: ${{ secrets.SERVER_IP }}
          USERNAME: ${{ secrets.USERNAME }}
          SERVER_DESTINATION: ${{ secrets.SERVER_DESTINATION }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
411,"on: [status]

permissions: read-all

jobs:
  circleci_artifacts_redirector_job:
    runs-on: ubuntu-latest
    if: ""${{ github.event.context == \'ci/circleci: build_doc\' }}""
    permissions:
      statuses: write
    name: Run CircleCI artifacts redirector
    steps:
      - name: GitHub Action step
        id: step1
        uses: larsoner/circleci-artifacts-redirector-action@master
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          api-token: ${{ secrets.CIRCLECI_TOKEN }}
          artifact-path: 0/test_artifacts/root_artifact.md
          circleci-jobs: build_doc
          job-title: Check the rendered docs here!
      - name: Check the URL
        if: github.event.status != \'pending\'
        run: |
          curl --fail ${{ steps.step1.outputs.url }} | grep $GITHUB_SHA

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
412,"    - name: Close Issue
      run: gh issue close --comment ""Auto-closing issue"" ""1""
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Issue
        uses: peter-evans/close-issue@v3
        with:
          issue-number: 1
          comment: Auto-closing issue

on:
  issues:
    types: [opened]
jobs:
  titlePrefixCheck:
    runs-on: ubuntu-latest
    steps:
      - if: startsWith(github.event.issue.title, \'ABC-\') != \'true\'
        name: Close Issue
        uses: peter-evans/close-issue@v3
        with:
          comment: |
            Issue title must start with \'ABC-\'.
            Auto-closing this issue.

      - name: Close Issue
        uses: peter-evans/close-issue@v3
        with:
          issue-number: 1
          comment: Auto-closing issue
          labels: |
            wontfix
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
413,"    - name: Close Pull
      run: gh pr close --comment ""Auto-closing pull request"" --delete-branch ""1""
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Pull
        uses: peter-evans/close-pull@v3
        with:
          pull-request-number: 1
          comment: Auto-closing pull request
          delete-branch: true
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
414,"- name: Deploy to AWS CloudFormation
  uses: aws-actions/aws-cloudformation-github-deploy@v1
  with:
    name: MyStack
    template: myStack.yaml
    parameter-overrides: ""MyParam1=myValue,MyParam2=${{ secrets.MY_SECRET_VALUE }}""

[
  {
    ""ParameterKey"": ""MyParam1"",
    ""ParameterValue"": ""myValue1""
  }
]

{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Effect"": ""Allow"",
            ""Action"": [
                ""cloudformation:CreateStack"",
                ""cloudformation:DescribeStacks"",
                ""cloudformation:CreateChangeSet"",
                ""cloudformation:DescribeChangeSet"",
                ""cloudformation:DeleteChangeSet"",
                ""cloudformation:ExecuteChangeSet""
            ],
            ""Resource"": ""*""
        }
    ]
}

name: Deploy Cluster

on:
  workflow_dispatch:
    inputs:
      region:
        description: \'AWS Region\'
        required: true
        default: \'eu-west-1\'
      keypair:
        description: \'SSH Key Pair\'
        required: true

jobs:
  cluster:
    name: Deploy stack to AWS
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region}}

    - name: Configure environment name
      id: env-name
      env:
        REPO: ${{ github.repository }}
      run: |
        ENVIRONMENT=`echo $REPO | tr ""/"" ""-""`
        echo ""Environment name: $ENVIRONMENT""
        echo ""environment=$ENVIRONMENT"" >> $GITHUB_OUTPUT

    - name: Deploy Amazon EKS Cluster
      id: eks-cluster
      uses: aws-actions/aws-cloudformation-github-deploy@master
      with:
        name: ${{ steps.env-name.outputs.environment }}-cluster
        template: https://s3.amazonaws.com/aws-quickstart/quickstart-amazon-eks/templates/amazon-eks-master.template.yaml
        no-fail-on-empty-changeset: ""1""
        parameter-overrides: >-
          AvailabilityZones=${{ github.event.inputs.region }}a,
          AvailabilityZones=${{ github.event.inputs.region }}c,
          KeyPairName=${{ github.event.inputs.keypair }},
          NumberOfAZs=2,
          ProvisionBastionHost=Disabled,
          EKSPublicAccessEndpoint=Enabled,
          EKSPrivateAccessEndpoint=Enabled,
          RemoteAccessCIDR=0.0.0.0/0


uses: aws-actions/aws-cloudformation-github-deploy@v1
with:
  name: eks-primary
  template: https://s3.amazonaws.com/aws-quickstart/quickstart-amazon-eks/templates/amazon-eks-master.template.yaml
  no-fail-on-empty-changeset: ""1""
  http-proxy: ""http://companydomain.com:3128""

# Your environment configuration
HTTP_PROXY=""http://companydomain.com:3128""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
415,"steps:
- uses: hashicorp/setup-terraform@v2

steps:
- uses: hashicorp/setup-terraform@v2
  with:
    terraform_version: 1.1.7

steps:
- uses: hashicorp/setup-terraform@v2
  with:
    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

steps:
- uses: hashicorp/setup-terraform@v2
  with:
    cli_config_credentials_hostname: \'terraform.example.com\'
    cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

steps:
- uses: hashicorp/setup-terraform@v2
  with:
    terraform_wrapper: false

steps:
- uses: hashicorp/setup-terraform@v2

- run: terraform init

- id: plan
  run: terraform plan -no-color

- run: echo ${{ steps.plan.outputs.stdout }}
- run: echo ${{ steps.plan.outputs.stderr }}
- run: echo ${{ steps.plan.outputs.exitcode }}

defaults:
  run:
    working-directory: ${{ env.tf_actions_working_dir }}
permissions:
  pull-requests: write
steps:
- uses: actions/checkout@v3
- uses: hashicorp/setup-terraform@v2

- name: Terraform fmt
  id: fmt
  run: terraform fmt -check
  continue-on-error: true

- name: Terraform Init
  id: init
  run: terraform init

- name: Terraform Validate
  id: validate
  run: terraform validate -no-color

- name: Terraform Plan
  id: plan
  run: terraform plan -no-color
  continue-on-error: true

- uses: actions/github-script@v6
  if: github.event_name == \'pull_request\'
  env:
    PLAN: ""terraform\
${{ steps.plan.outputs.stdout }}""
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    script: |
      const output = `#### Terraform Format and Style \xf0\x9f\x96\x8c\\`${{ steps.fmt.outcome }}\\`
      #### Terraform Initialization \xe2\x9a\x99\xef\xb8\x8f\\`${{ steps.init.outcome }}\\`
      #### Terraform Validation \xf0\x9f\xa4\x96\\`${{ steps.validate.outcome }}\\`
      <details><summary>Validation Output</summary>

      \\`\\`\\`\

      ${{ steps.validate.outputs.stdout }}
      \\`\\`\\`

      </details>

      #### Terraform Plan \xf0\x9f\x93\x96\\`${{ steps.plan.outcome }}\\`

      <details><summary>Show Plan</summary>

      \\`\\`\\`\

      ${process.env.PLAN}
      \\`\\`\\`

      </details>

      *Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`, Working Directory: \\`${{ env.tf_actions_working_dir }}\\`, Workflow: \\`${{ github.workflow }}\\`*`;

      github.rest.issues.createComment({
        issue_number: context.issue.number,
        owner: context.repo.owner,
        repo: context.repo.repo,
        body: output
      })

defaults:
  run:
    working-directory: ${{ env.tf_actions_working_dir }}
permissions:
  pull-requests: write
steps:
- uses: actions/checkout@v3
- uses: hashicorp/setup-terraform@v2

- name: Terraform fmt
  id: fmt
  run: terraform fmt -check
  continue-on-error: true

- name: Terraform Init
  id: init
  run: terraform init

- name: Terraform Validate
  id: validate
  run: terraform validate -no-color

- name: Terraform Plan
  id: plan
  run: terraform plan -no-color
  continue-on-error: true

- uses: actions/github-script@v6
  if: github.event_name == \'pull_request\'
  env:
    PLAN: ""terraform\
${{ steps.plan.outputs.stdout }}""
  with:
    github-token: ${{ secrets.GITHUB_TOKEN }}
    script: |
      // 1. Retrieve existing bot comments for the PR
      const { data: comments } = await github.rest.issues.listComments({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
      })
      const botComment = comments.find(comment => {
        return comment.user.type === \'Bot\' && comment.body.includes(\'Terraform Format and Style\')
      })

      // 2. Prepare format of the comment
      const output = `#### Terraform Format and Style \xf0\x9f\x96\x8c\\`${{ steps.fmt.outcome }}\\`
      #### Terraform Initialization \xe2\x9a\x99\xef\xb8\x8f\\`${{ steps.init.outcome }}\\`
      #### Terraform Validation \xf0\x9f\xa4\x96\\`${{ steps.validate.outcome }}\\`
      <details><summary>Validation Output</summary>

      \\`\\`\\`\

      ${{ steps.validate.outputs.stdout }}
      \\`\\`\\`

      </details>

      #### Terraform Plan \xf0\x9f\x93\x96\\`${{ steps.plan.outcome }}\\`

      <details><summary>Show Plan</summary>

      \\`\\`\\`\

      ${process.env.PLAN}
      \\`\\`\\`

      </details>

      *Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`, Working Directory: \\`${{ env.tf_actions_working_dir }}\\`, Workflow: \\`${{ github.workflow }}\\`*`;

      // 3. If we have a comment, update it, otherwise create a new one
      if (botComment) {
        github.rest.issues.updateComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          comment_id: botComment.id,
          body: output
        })
      } else {
        github.rest.issues.createComment({
          issue_number: context.issue.number,
          owner: context.repo.owner,
          repo: context.repo.repo,
          body: output
        })
      }
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
416,"name: Testing the GitHub Pages publication

on:
  push
    
jobs:
  jekyll:
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2

    # Use GitHub Actions' cache to shorten build times and decrease load on servers
    - uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    # Standard usage
    - uses:  lemonarc/jekyll-action@1.0.0
    
    # Example deployment: Push to S3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Sync output to S3
      run: |
        aws s3 sync ./_site/ s3://my-s3-bucket --delete
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
417,"name: GitHub Polls Actions Bot

on:
  issue_comment:
    types: [created, edited] # issue comment is created or edited
  issues:
    types: [opened, edited] # issue is opened or edited

jobs:
  polls:
    runs-on: ubuntu-latest
    steps:
    - uses: imjohnbo/gh-polls-bot-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # created for you automatically; https://help.github.com/en/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-actions#github_token-secret

/polls Option1 \'Option 2\' ""Option 3""

# Automatically replace with the following markdown =>
[![](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option1)](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option1/vote)
[![](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option%202)](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option%202/vote)
[![](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option%203)](https://api.gh-polls.com/poll/01BY7ECS60GG8F9AR1VMR8745S/Option%203/vote)
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
418,"      - shell: bash
        run: mkdir toolchains
      - name: specify NDK
        uses: ravinderjangra/android-ndk-toolchain-setup@0.2
        with:
          api: '21'
          arch: 'x86'
          install-location: 'toolchains'
          force: true
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
419,"name: checkpatch review
on: [pull_request]
jobs:
  my_review:
    name: checkpatch review
    runs-on: ubuntu-latest
    steps:
    - name: \'Calculate PR commits + 1\'
      run: echo ""PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))"" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ env.PR_FETCH_DEPTH }}
    - name: Run checkpatch review
      uses: webispy/checkpatch-action@v9

name: checkpatch review
on: [pull_request]
jobs:
  my_review:
    name: checkpatch review
    runs-on: ubuntu-latest
    steps:
    - name: \'Calculate PR commits + 1\'
      run: echo ""PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))"" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ env.PR_FETCH_DEPTH }}
    - name: Run DPDK checkpatches.sh review
      uses: webispy/checkpatch-action@v9
      env:
        DPDK_CHECKPATCH_PATH: /usr/bin/checkpatch.pl
        CHECKPATCH_COMMAND: ./devtools/checkpatches.sh

name: checkpatch review
on: [pull_request]
jobs:
  my_review:
    name: checkpatch review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
    - name: \'Calculate PR commits + 1\'
      run: echo ""PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))"" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: ${{ env.PR_FETCH_DEPTH }}
    - name: Run checkpatch review
      uses: webispy/checkpatch-action@v9
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

# This isn\'t actually a Linux kernel tree
--no-tree

--ignore CONFIG_DESCRIPTION
--ignore FILE_PATH_CHANGES
--ignore GERRIT_CHANGE_ID
--ignore GIT_COMMIT_ID
--ignore NEW_TYPEDEFS
--ignore SPDX_LICENSE_TAG
--ignore SPACING
--ignore CONST_STRUCT
--ignore EMBEDDED_FUNCTION_NAME
--exclude externals
--exclude examples
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
420,"- name: Copy folder content recursively to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: test
          remote: scp/directory
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.PASSWORD }}


- name: Copy single file to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: test/oof.txt
          remote: scp/single/oof.txt
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.PASSWORD }}

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
421,"- name: ls -a via ssh
  uses: garygrossgarten/github-action-ssh@release
  with:
    command: ls -a
    host: ${{ secrets.HOST }}
    username: garygrossgarten
    passphrase: ${{ secrets.PASSPHRASE }}
    privateKey: ${{ secrets.PRIVATE_KEY}}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
422,"- name: Deploy to server
  id: deploy
  uses: Pendect/action-rsyncer@v1.1.0
  env:
    DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
  with:
    flags: \'-avzr --delete\'
    options: \'\'
    ssh_options: \'\'
    src: \'public/\'
    dest: \'user@server.com:/var/www/server.com\'

- name: Display status from deploy
  run: echo ""${{ steps.deploy.outputs.status }}""

- name: Deploy to server
  id: deploy
  uses: Pendect/action-rsyncer@v1.1.0
  env:
    DEPLOY_KEY: ${{secrets.DEPLOY_KEY}}
  with:
    flags: \'-avzr --delete\'
    options: \'\'
    ssh_options: \'-p 2222\'
    src: \'public/\'
    dest: \'user@server.com:/var/www/server.com\'

- name: Display status from deploy
  run: echo ""${{ steps.deploy.outputs.status }}""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
423,"- uses: sonots/slack-notice-action@v3
  with:
    status: ${{ job.status }}
    username: Custom Username
    icon_emoji: \':octocat:\'
    channel: \'#integration-test\'
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required, but this should be automatically supplied by GitHub.
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Required. Legacy Incoming Webhook is also supported.
  if: always() # Pick up events even if the job fails or is canceled.

- uses: sonots/slack-notice-action@v3
  with:
    status: custom
    payload: |
      {
        text: ""Custom Field Check"",
        attachments: [{
          ""author_name"": ""sonots@slack-notice-action"", // json
          fallback: \'fallback\',
          color: \'good\',
          title: \'CI Result\',
          text: \'Succeeded\',
          fields: [{
            title: \'lower case\',
            value: \'LOWER CASE CHECK\'.toLowerCase(),
            short: true
          },
          {
            title: \'reverse\',
            value: \'gnirts esrever\'.split(\'\').reverse().join(\'\'),
            short: true
          },
          {
            title: \'long title1\',
            value: \'long value1\',
            short: false
          }],
          actions: [{
          }]
        }]
      }
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # optional
    SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
424,"uses: TrueBrain/actions-flake8@master

uses: TrueBrain/actions-flake8@master
with:
  path: src

uses: TrueBrain/actions-flake8@master
with:
  ignore: E4,W

uses: TrueBrain/actions-flake8@master
with:
  max_line_length: 90

uses: TrueBrain/actions-flake8@master
with:
  only_warn: 1
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
425,"name: ""Prow github actions""
on:
  issue_comment:
    types: [created]

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - uses: jpmcb/prow-github-actions@v1
        with:
          prow-commands: \'/assign 
            /unassign 
            /approve 
            /retitle 
            /area 
            /kind 
            /priority 
            /remove 
            /lgtm 
            /close 
            /reopen 
            /lock 
            /milestone 
            /hold 
            /cc 
            /uncc\'
          github-token: ""${{ secrets.GITHUB_TOKEN }}""

name: ""Pull Request Labeler""
on:
- pull_request_target

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/labeler@main
      with:
        repo-token: ""${{ secrets.GITHUB_TOKEN }}""

# labels to be used with /area command
area:
  - \'bug\'
  - \'important\'

# File globs for PR labeler
tests:
  - \'**/*.test.ts\'

name: ""Merge on lgtm label""
on:
  schedule:
  - cron: ""0 * * * *""

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - uses: jpmcb/prow-github-actions@v1
        with:
          jobs: \'lgtm\'
          github-token: ""${{ secrets.GITHUB_TOKEN }}""

          # this is optional and defaults to \'merge\'
          merge-method: \'squash\'

name: ""Run Jobs on PR""
on: pull_request

jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - uses: jpmcb/prow-github-actions@v1
        with:
          jobs: \'lgtm\'
          github-token: ""${{ secrets.GITHUB_TOKEN }}""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
426,"uses: rokroskar/workflow-run-cleanup-action
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEBUG: FALSE

name: CI
on:
  push: []
  jobs:
    cleanup-runs:
      runs-on: ubuntu-latest
      steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: ""${{ secrets.GITHUB_TOKEN }}""
      if: ""!startsWith(github.ref, \'refs/tags/\') && github.ref != \'refs/heads/master\'""
    ...
    other-jobs:
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
427,"- name: Setup timezone
  uses: zcong1993/setup-timezone@master
  with:
    timezone: Asia/Shanghai
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
428,"uses: voxmedia/github-action-slack-notify-build@v1
with:
  channel: app-alerts
  status: STARTED
  color: good
env:
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}

- name: Notify slack success
  if: success()
  id: slack # IMPORTANT: reference this step ID value in future Slack steps
  env:
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
  uses: voxmedia/github-action-slack-notify-build@v1
  with:
    channel: app-alerts
    status: STARTING
    color: warning

- name: Run tests
  # ... your test step here
- name: Notify slack success
  if: success()
  env:
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
  uses: voxmedia/github-action-slack-notify-build@v1
  with:
    # Updates existing message from the first step
    message_id: ${{ steps.slack.outputs.message_id }}
    channel: app-alerts
    status: SUCCESS
    color: good

- name: Run tests
  # ... your test step here
- name: Notify slack success
  if: success()
  env:
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
  uses: voxmedia/github-action-slack-notify-build@v1
  with:
    channel: app-alerts
    status: SUCCESS
    color: good

- name: Notify slack fail
  if: failure()
  env:
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
  uses: voxmedia/github-action-slack-notify-build@v1
  with:
    channel: app-alerts
    status: FAILED
    color: danger

message_id: ${{ steps.<your_first_slack_step_id>.outputs.message_id }}
","[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
429,"- uses: dev-drprasad/delete-older-releases@v0.2
  with:
    repo: <owner>/<repoName> # defaults to current repo
    keep_latest: 3
    delete_tag_pattern: beta # defaults to """"
  env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
430,"uses: michaeljolley/aggregit@v1
with:
  githubToken: ${{ secrets.GITHUB_TOKEN }}
  project_id: ${{ secrets.project_id }}
  private_key: ${{ secrets.private_key }}
  client_email: ${{ secrets.client_email }}
  firebaseDbUrl: ${{ secrets.firebaseDbUrl }}

{
    name: 'repoName',
    url: 'https://github.com/owner/repoName',
    contributors:  {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    issues: {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    forks: {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    pullRequests: {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    stars:  {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    watchers:  {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    totalIssues:  {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    totalPullRequests: {
        '2020-04-14': 4,
        '2020-04-15': 3
    },
    healthPercentage: {
        '2020-04-14': 64,
        '2020-04-15': 83
    },
    commits: {
        '2020-04-14': 4,
        '2020-04-15': 6
    },
    codeOfConductExists: {
        '2020-04-14': false,
        '2020-04-15': true
    },
    contributingExists: {
        '2020-04-14': true,
        '2020-04-15': true
    },
    issueTemplateExists: {
        '2020-04-14': false,
        '2020-04-15': false
    },
    pullRequestTemplateExists: {
        '2020-04-14': false,
        '2020-04-15': true
    },
    licenseExists: {
        '2020-04-14': true,
        '2020-04-15': true
    },
    readMeExists: {
        '2020-04-14': true,
        '2020-04-15': true
    },
    totalViews: {
        '2020-04-14': 110,
        '2020-04-15': 89
    },
    uniqueViews: {
        '2020-04-14': 45,
        '2020-04-15': 23
    }
}
","[0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
431,"name: Test Build

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.arch }} build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64
          - mips_24kc

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build
        uses: openwrt/gh-action-sdk@main
        env:
          ARCH: ${{ matrix.arch }}

      - name: Store packages
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.arch}}-packages
          path: bin/packages/${{ matrix.arch }}/packages/*.ipk
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
432,"# .github/workflows/pullpreview.yml
name: PullPreview
on:
  # the schedule is optional, but helps to make sure no dangling resources are left when GitHub Action does not behave properly
  schedule:
    - cron: ""30 2 * * *""
  push:
    branches:
      - main
  pull_request:
    types: [labeled, unlabeled, synchronize, closed, reopened]

jobs:
  deploy:
    if: github.event_name == \'schedule\' || github.event_name == \'push\' || github.event.label.name == \'pullpreview\' || contains(github.event.pull_request.labels.*.name, \'pullpreview\')
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - uses: pullpreview/action@v5
        with:
          # Those GitHub users will have SSH access to the servers
          admins: crohr,other-github-user
          # A staging environment will always exist for the master branch
          always_on: main
          # Use the cidrs option to restrict access to the live environments to specific IP ranges
          cidrs: ""0.0.0.0/0""
          # PullPreview will use those 2 files when running docker-compose up
          compose_files: docker-compose.yml,docker-compose.pullpreview.yml
          # The preview URL will target this port
          default_port: 80
          # Use a 512MB RAM instance type instead of the default 2GB
          instance_type: nano_2_0
          # Ports to open on the server
          ports: 80,5432
        env:
          AWS_ACCESS_KEY_ID: ""${{ secrets.AWS_ACCESS_KEY_ID }}""
          AWS_SECRET_ACCESS_KEY: ""${{ secrets.AWS_SECRET_ACCESS_KEY }}""
          AWS_REGION: ""us-east-1""
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
433,"   - name: Build & Test
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ runner.workspace }}/build
          # will set the CC & CXX for cmake
          cc: gcc
          cxx: g++
          build-type: Release
          # Extra options pass to cmake while configuring project
          configure-options: -DCMAKE_C_FLAGS=-w32 -DPNG_INCLUDE=OFF
          run-test: true
          ctest-options: -R mytest
          # install the build using cmake --install
          install-build: true
          # run build using '-j [parallel]' to use multiple threads to build
          parallel: 14
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
434,"      # Export NEW_VAR_NAME variable for subsequent steps, and export all environment variables matching the optional regexp.
    - uses: lukka/set-shell-env@v1
      name: 
      with:
        NEW_VAR_NAME: new_var_value
        filter: <regexp>
    # with:
    #   shell: 'bash' or 'tcsh' or any command that starts a shell.
    #   args: '-c env' or any arguments that list the environment variables as NAME=VALUE pairs.
    #   filter: an optional reg exp to export matching variables out of the desired shell.
    #   YOUR_VARIABLE_NAME: provide value for any new variable you name. Note the name will always be converted to be all uppercase.
    #  Here onward any following step can access the environment variable using:
    #  in your yml file:
    #     ${{ env.YOUR_VARIABLE_NAME }}
    - name: print $NEW_VAR_NAME
      run: |
        echo $NEW_VAR_NAME
      shell: bash
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
435,"jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: <tofill>
        release_name: <tofill>
        draft: true
        prerelease: false

    - uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip

    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}

","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
436,"- name: Install Snapcraft
  uses: samuelmeuli/action-snapcraft@v2

name: My workflow

on: push

jobs:
  my-job:
    runs-on: ubuntu-latest
    env:
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v2

      # You can now run Snapcraft shell commands
      - name: Use Snapcraft
        run: snapcraft --help

snapcraft export-login --snaps SNAP_NAME --channels edge -

env:
  SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}

- name: Install Snapcraft
  uses: samuelmeuli/action-snapcraft@v2
  with:
    skip_install: true # optional, if already installed in an earlier step

- name: Install Snapcraft with LXD
  uses: samuelmeuli/action-snapcraft@v2
  with:
    use_lxd: ${{ matrix.os == 'ubuntu-18.04' }}
- name: Build snap
  run: sg lxd -c 'snapcraft --use-lxd'
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
437,"name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: php-actions/composer@v6
    # ... then your own project steps ...

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      with:
        command: your-command-here

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      with:
        dev: no
        args: --profile --ignore-platform-reqs

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      with:
        php_version: ""7.1""
        version: 1

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      with:
        php_version: ""7.4""
        php_extensions: redis exif
        version: 2.x

name: CI

on: [push]

jobs:
  build:
    runs-on: [ubuntu-latest]
    
    steps:
    - uses: actions/checkout@v3

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles(\'**/composer.lock\') }}
      
    - uses: php-actions/composer@v6

    ...      

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      with:
        ssh_key: ${{ secrets.ssh_key }}
        ssh_key_pub: ${{ secrets.ssh_key_pub }}

jobs:
  build:

    ...

    - name: Install dependencies
      uses: php-actions/composer@v6
      env:
        COMPOSER_AUTH: \'{""github-oauth"": {""github.com"": ""${{ secrets.PAT }}""} }\'
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
438,"name: Lint

on: [push]

jobs:
  xml-linters:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Download schema
      run: wget https://apps.nextcloud.com/schema/apps/info.xsd
    - name: Lint info.xml
      uses: ChristophWurst/xmllint-action@v1
      with:
        xml-file: ./appinfo/info.xml
        xml-schema-file: ./info.xsd

name: Lint

on: [push]

jobs:
  xml-linters:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Download schema
      run: wget https://apps.nextcloud.com/schema/apps/info.xsd
    - name: Lint info.xml
      uses: korelstar/xmllint-problem-matcher@v1
      uses: ChristophWurst/xmllint-action@v1
      with:
        xml-file: ./appinfo/info.xml
        xml-schema-file: ./info.xsd
","[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
439,"- name: Webhook
  uses: joelwmale/webhook-action@master
  with:
    url: ${{ secrets.WEBHOOK_URL }}
    headers: \'{""repository"": ""joelwmale/webhook-action""}\'
    body: \'{""event"": ""deployment"", ""repository"": ""joelwmale/webhook-action""}\'

  headers: \'{""repository"": ""joelwmale/webhook-action""}\'

  body: \'{""event"": ""deployment"", ""repository"": ""joelwmale/webhook-action""}\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
440,"name: Zola on GitHub Pages

on: 
 push:
  branches:
   - main

jobs:
  build:
    name: Publish site
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main
      uses: actions/checkout@v3.0.0
    - name: Build and deploy
      uses: shalzz/zola-deploy-action@v0.17.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Zola on GitHub Pages

on:
  push:
    branches:
      - main 
  pull_request:
  
jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3.0.0
      - name: Build only 
        uses: shalzz/zola-deploy-action@v0.17.2
        env:
          BUILD_DIR: docs
          BUILD_ONLY: true
          BUILD_FLAGS: --drafts
          # A GitHub token is not necessary when BUILD_ONLY is true
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build_and_deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3.0.0
      - name: Build and deploy
        uses: shalzz/zola-deploy-action@v0.17.2
        env:
          BUILD_DIR: docs
          PAGES_BRANCH: gh-pages
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
441,"jobs:
  run:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macos-latest]
        php-versions: [\'8.0\', \'8.1\', \'8.2\', \'8.3\']
    name: PHP ${{ matrix.php-versions }} Test on ${{ matrix.operating-system }}
    env:
      extensions: intl, pcov
      key: cache-v1 # can be any string, change to clear the extension cache.
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup cache environment
      id: extcache
      uses: shivammathur/cache-extensions@v1
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.extensions }}
        key: ${{ env.key }}

    - name: Cache extensions
      uses: actions/cache@v3
      with:
        path: ${{ steps.extcache.outputs.dir }}
        key: ${{ steps.extcache.outputs.key }}
        restore-keys: ${{ steps.extcache.outputs.key }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: ${{ env.extensions }}

- name: Cache extensions
  uses: actions/cache@v3
  with:
    path: ${{ steps.extcache.outputs.dir }}
    key: ${{ steps.extcache.outputs.key }}-${{ env.phpts }}
    restore-keys: ${{ steps.extcache.outputs.key }}-${{ env.phpts }}
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
442,"name: CI
on: [push]
jobs:
  build:
    name: Setup Xamarin and Mono versions
    runs-on: macos-latest
    steps:
    - name: setup-xamarin
      uses: maxim-lobanov/setup-xamarin@v1
      with:
        mono-version: '6.6' # specify version in '<major>.<minor>' format
        xamarin-ios-version: '13' # specify version in '<major>' format
        xamarin-mac-version: latest # specify 'latest' keyword to pick up the latest available version
        xamarin-android-version: '10.1.3.7' # specify full version; it is not recomended option because your pipeline can be broken suddenly in future
        xcode-version: '11.x' # set the latest available Xcode 11
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
443,"on:
  release:
    types: [created]

jobs:
  build:
    name: Build release binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.3.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Build binary
        run: cargo build --release --verbose

      - name: Upload release binary
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ./target/release/my-widget
          asset_name: my-widget
          asset_content_type: application/octet-stream
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
444,"# File: .github/workflows/workflow.yml

on: [push]

name: AzureLoginSample

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - run: |
        az webapp list --query ""[?state==\'Running\']""


# File: .github/workflows/workflow.yml

on: [push]

name: AzurePowerShellLoginSample

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        enable-AzPSSession: true 
     
     - run: |
        Get-AzVM -ResourceGroupName ""ResourceGroup11""
        

# File: .github/workflows/OIDC_workflow.yml

name: Run Azure Login with OIDC
on: [push]

permissions:
      id-token: write
      contents: read
jobs: 
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az account show
            az group list

# File: .github/workflows/OIDC_workflow.yml

name: Run Azure Login with OIDC
on: [push]

permissions:
      id-token: write
      contents: read
      
jobs: 
  Windows-latest:
      runs-on: windows-latest
      steps:
        - name: OIDC Login to Azure Public Cloud with AzPowershell (enableAzPSSession true)
          uses: azure/login@v1
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} 
            enable-AzPSSession: true

        - name: \'Get RG with powershell action\'
          uses: azure/powershell@v1
          with:
             inlineScript: |
               Get-AzResourceGroup
             azPSVersion: ""latest""


# File: .github/workflows/workflow.yml

    - name: Login to Azure US Gov Cloud with CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_US_GOV_CREDENTIALS }}
        environment: \'AzureUSGovernment\'
        enable-AzPSSession: false
    - name: Login to Azure US Gov Cloud with Az Powershell
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_US_GOV_CREDENTIALS }}
        environment: \'AzureUSGovernment\'
        enable-AzPSSession: true

# File: .github/workflows/workflow.yml

on: [push]

name: AzureLoginSample

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        environment: \'AzureStack\'

    - run: |
        az webapp list --query ""[?state==\'Running\']""



   az ad sp create-for-rbac --name ""myApp"" --role contributor \\
                            --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group} \\
                            --sdk-auth

 {
   ""clientId"": ""<GUID>"",
   ""clientSecret"": ""<STRING>"",
   ""subscriptionId"": ""<GUID>"",
   ""tenantId"": ""<GUID>"",
   ""resourceManagerEndpointUrl"": ""<URL>""
   (...)
 }
 

  - uses: Azure/login@v1
    with:
      creds: \'{""clientId"":""${{ secrets.CLIENT_ID }}"",""clientSecret"":""${{ secrets.CLIENT_SECRET }}"",""subscriptionId"":""${{ secrets.SUBSCRIPTION_ID }}"",""tenantId"":""${{ secrets.TENANT_ID }}""}\'

# File: .github/workflows/workflow.yml

on: [push]

name: AzureLoginWithNoSubscriptions

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        allow-no-subscriptions: true

- name: Azure CLI script
  uses: azure/CLI@v1
  with:
    inlineScript: |
      az logout
      az cache purge
      az account clear
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
445,"# File: .github/workflows/workflow.yml

on: push

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # checkout the repo
    - name: \'Checkout Github Action\' 
      uses: actions/checkout@master

    - name: Setup Node 10.x
      uses: actions/setup-node@v1
      with:
        node-version: \'10.x\'
    - name: \'npm install, build, and test\'
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: \'Run Azure webapp deploy action using publish profile credentials\'
      uses: azure/webapps-deploy@v2
      with:
        app-name: node-rn
        publish-profile: ${{ secrets.azureWebAppPublishProfile }}


on: [push]

name: Linux_Container_Node_Workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # checkout the repo
    - name: \'Checkout Github Action\'
      uses: actions/checkout@master

    - uses: azure/docker-login@v1
      with:
        login-server: contoso.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - run: |
        docker build . -t contoso.azurecr.io/nodejssampleapp:${{ github.sha }}
        docker push contoso.azurecr.io/nodejssampleapp:${{ github.sha }} 

    - uses: azure/webapps-deploy@v2
      with:
        app-name: \'node-rnc\'
        publish-profile: ${{ secrets.azureWebAppPublishProfile }}
        images: \'contoso.azurecr.io/nodejssampleapp:${{ github.sha }}\'

on: [push]

name: Linux_Container_Node_Workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    # checkout the repo
    - name: \'Checkout Github Action\'
      uses: actions/checkout@master

    - name: \'Login via Azure CLI\'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/docker-login@v1
      with:
        login-server: contoso.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - run: |
        docker build . -t contoso.azurecr.io/nodejssampleapp:${{ github.sha }}
        docker push contoso.azurecr.io/nodejssampleapp:${{ github.sha }} 

    - uses: azure/webapps-deploy@v2
      with:
        app-name: \'node-rnc\'
        images: \'contoso.azurecr.io/nodejssampleapp:${{ github.sha }}\'

az ad sp create-for-rbac --name ""{sp-name}"" --sdk-auth --role contributor \\
    --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group}/providers/Microsoft.Web/sites/{app-name}

az ad sp create-for-rbac --name ""{sp-name}"" --sdk-auth --role contributor \\
    --scopes /subscriptions/{subscription-id}/resourceGroups/{resource-group}

{
  ""clientId"": ""<GUID>"",
  ""clientSecret"": ""<GUID>"",
  ""subscriptionId"": ""<GUID>"",
  ""tenantId"": ""<GUID>"",
  (...)
}

    - name: Set Web App ACR authentication
      uses: Azure/appservice-settings@v1
      with:
       app-name: \'node-rnc\'
       app-settings-json: |
         [
             {
                 ""name"": ""DOCKER_REGISTRY_SERVER_PASSWORD"",
                 ""value"": ""${{ secrets.REGISTRY_PASSWORD }}"",
                 ""slotSetting"": false
             },
             {
                 ""name"": ""DOCKER_REGISTRY_SERVER_URL"",
                 ""value"": ""https://contoso.azurecr.io"",
                 ""slotSetting"": false
             },
             {
                 ""name"": ""DOCKER_REGISTRY_SERVER_USERNAME"",
                 ""value"": ""${{ secrets.REGISTRY_USERNAME  }}"",
                 ""slotSetting"": false
             }
         ]
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
446,"steps:
- uses: zhulik/redis-action@1.1.0
  with:
    redis version: '5'
    number of databases: 100
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
447,"name: Auto Assign to Project(s)

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, labeled]
  issue_comment:
    types: [created]
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  assign_one_project:
    runs-on: ubuntu-latest
    name: Assign to One Project
    steps:
    - name: Assign NEW issues and NEW pull requests to project 2
      uses: srggrs/assign-one-project-github-action@1.2.1
      if: github.event.action == 'opened'
      with:
        project: 'https://github.com/srggrs/assign-one-project-github-action/projects/2'

    - name: Assign issues and pull requests with `bug` label to project 3
      uses: srggrs/assign-one-project-github-action@1.2.1
      if: |
        contains(github.event.issue.labels.*.name, 'bug') ||
        contains(github.event.pull_request.labels.*.name, 'bug')
      with:
        project: 'https://github.com/srggrs/assign-one-project-github-action/projects/3'
        column_name: 'Labeled'

...

if: |
  github.event_name == 'issues' &&
  (
    github.event.action == 'opened' ||
    contains(github.event.issue.labels.*.name, 'mylabel')
  )
...

name: Auto Assign to Project(s)

on:
  issues:
    types: [opened, labeled]
  pull_request_target:
    types: [opened, labeled]
  issue_comment:
    types: [created]
env:
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

jobs:
  assign_one_project:
    runs-on: ubuntu-latest
    name: Assign to One Project
    steps:
    - name: Assign NEW issues and NEW pull requests to project 2
      uses: srggrs/assign-one-project-github-action@1.2.1
      if: github.event.action == 'opened'
      with:
        project: 'https://github.com/srggrs/assign-one-project-github-action/projects/2'

    - name: Assign issues and pull requests with `bug` label to project 3
      uses: srggrs/assign-one-project-github-action@1.2.1
      if: |
        contains(github.event.issue.labels.*.name, 'bug') ||
        contains(github.event.pull_request.labels.*.name, 'bug')
      with:
        project: 'https://github.com/srggrs/assign-one-project-github-action/projects/3'
        column_name: 'Labeled'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
448,"name: ""Pull Request Workflow""
on:
  pull_request:
    # The specific activity types are listed here to include ""labeled"" and ""unlabeled""
    # (which are not included by default for the ""pull_request"" trigger).
    # This is needed to allow skipping enforcement of the changelog in PRs with specific labels,
    # as defined in the (optional) ""skipLabels"" property.
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]

jobs:
  # Enforces the update of a changelog file on every pull request 
  changelog:
    runs-on: ubuntu-latest
    steps:
    - uses: dangoslen/changelog-enforcer@v3
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
449,"steps:
  # this Action should follow steps to set up Python build environment
  - name: Install Python dependencies
    uses: py-actions/py-dependency-install@v4

steps:
  # this Action should follow steps to set up Python build environment
  - name: Install Python dependencies
    uses: py-actions/py-dependency-install@v4
    with:
      path: ""path/to/requirements.txt""

steps:
  # this Action should follow steps to set up Python build environment
  - name: Install Python dependencies
    uses: py-actions/py-dependency-install@v4
    with:
      update-pip: ""false""
      update-setuptools: ""false""
      update-wheel: ""false""
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
450,"steps:
- name: Setup Debug Session
  uses: csexton/debugger-action@master

Running tmate...

To connect to this session copy-n-paste the following into a terminal:

ssh redactedMxoJ0pXmjredacted@nyc1.tmate.io

touch /tmp/keepalive
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
451,"on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - \'v*\' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
452,"- name: Post status to Discord
  uses: sarisia/actions-status-discord@v1
  # make sure to set this `always()` 
  # or status failure and cancelled won\'t be notified!
  if: always()
  with:
    # provide discord webhook via either inputs or env.DISCORD_WEBHOOK
    webhook: ${{ secrets.DISCORD_WEBHOOK }}
    status: ${{ job.status }}
    job: deploy to github pages
    description: build pages and deploy to github pages!
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
453,"name: Lint

on: pull_request

jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hallee/eslint-action@1.0.3
        # GITHUB_TOKEN in forked repositories is read-only
        # https://help.github.com/en/actions/reference/events-that-trigger-workflows#pull-request-event-pull_request
        if: ${{ github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository }} 
        with:
          repo-token: ${{secrets.GITHUB_TOKEN}}
          source-root: optional-sub-dir
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),0,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
454,"jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # This sets up a ""problem matcher"" for eslint and standard
      - uses: actions/setup-node@v2
      # Now you can just run eslint or standard yourself
      - run: npx standard

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: goto-bus-stop/standard-action@v1
        with:
          # optionally select a different, standard-like linter
          # linter: semistandard

          # optionally select a different eslint formatter for the log output, default \'stylish\'
          # formatter: tap

          # limit the files to lint, default \'**/*.js\'
          # files: src/*.js

          # show errors in the the github diff UI
          annotate: true

        # Allow the action to add lint errors to the github diff UI
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

- uses: actions/checkout@v2
- uses: actions/setup-node@v1
- run: npm install
- uses: goto-bus-stop/standard-action@v1
  with:
    linter: semistandard

- uses: goto-bus-stop/standard-action@v1
  with:
    files: \'{src/**/*.js,test/**/*.js}\'
","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(1),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
455,"name: ""WordPress version checker""
on:
  push:
    branches:
      - master
  schedule:
    - cron: \'0 0 * * *\'

permissions:
  issues: write

jobs:
  wordpress-version-checker:
    runs-on: ubuntu-latest
    steps:
      - name: WordPress version checker
        uses: skaut/wordpress-version-checker@v1.0.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

{
    ""readme"": ""path/to/your/readme.txt""
}

{
    ""readme"": [""path/to/first/readme.txt"", ""path/to/second/readme.txt""]
}

{
    ""channel"": ""rc""
}

{
    ""assignees"": [""alice"", ""bob""]
}
","[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]",1,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),1,tensor(1),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0),0,tensor(0)
